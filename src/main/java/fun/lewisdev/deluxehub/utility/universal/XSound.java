package fun.lewisdev.deluxehub.utility.universal;

import com.google.common.base.Enums;
import com.google.common.base.Strings;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.Unmodifiable;

public enum XSound {
	AMBIENT_BASALT_DELTAS_ADDITIONS(new String[0]),
	AMBIENT_BASALT_DELTAS_LOOP(new String[0]),
	AMBIENT_BASALT_DELTAS_MOOD(new String[0]),
	AMBIENT_CAVE(new String[]{"AMBIENCE_CAVE"}),
	AMBIENT_CRIMSON_FOREST_ADDITIONS(new String[0]),
	AMBIENT_CRIMSON_FOREST_LOOP(new String[0]),
	AMBIENT_CRIMSON_FOREST_MOOD(new String[0]),
	AMBIENT_NETHER_WASTES_ADDITIONS(new String[0]),
	AMBIENT_NETHER_WASTES_LOOP(new String[0]),
	AMBIENT_NETHER_WASTES_MOOD(new String[0]),
	AMBIENT_SOUL_SAND_VALLEY_ADDITIONS(new String[0]),
	AMBIENT_SOUL_SAND_VALLEY_LOOP(new String[0]),
	AMBIENT_SOUL_SAND_VALLEY_MOOD(new String[0]),
	AMBIENT_UNDERWATER_ENTER(new String[0]),
	AMBIENT_UNDERWATER_EXIT(new String[0]),
	AMBIENT_UNDERWATER_LOOP(new String[]{"AMBIENT_UNDERWATER_EXIT"}),
	AMBIENT_UNDERWATER_LOOP_ADDITIONS(new String[]{"AMBIENT_UNDERWATER_EXIT"}),
	AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE(new String[]{"AMBIENT_UNDERWATER_EXIT"}),
	AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE(new String[]{"AMBIENT_UNDERWATER_EXIT"}),
	AMBIENT_WARPED_FOREST_ADDITIONS(new String[0]),
	AMBIENT_WARPED_FOREST_LOOP(new String[0]),
	AMBIENT_WARPED_FOREST_MOOD(new String[0]),
	BLOCK_AMETHYST_BLOCK_BREAK(new String[0]),
	BLOCK_AMETHYST_BLOCK_CHIME(new String[0]),
	BLOCK_AMETHYST_BLOCK_FALL(new String[0]),
	BLOCK_AMETHYST_BLOCK_HIT(new String[0]),
	BLOCK_AMETHYST_BLOCK_PLACE(new String[0]),
	BLOCK_AMETHYST_BLOCK_RESONATE(new String[0]),
	BLOCK_AMETHYST_BLOCK_STEP(new String[0]),
	BLOCK_AMETHYST_CLUSTER_BREAK(new String[0]),
	BLOCK_AMETHYST_CLUSTER_FALL(new String[0]),
	BLOCK_AMETHYST_CLUSTER_HIT(new String[0]),
	BLOCK_AMETHYST_CLUSTER_PLACE(new String[0]),
	BLOCK_AMETHYST_CLUSTER_STEP(new String[0]),
	BLOCK_ANCIENT_DEBRIS_BREAK(new String[0]),
	BLOCK_ANCIENT_DEBRIS_FALL(new String[0]),
	BLOCK_ANCIENT_DEBRIS_HIT(new String[0]),
	BLOCK_ANCIENT_DEBRIS_PLACE(new String[0]),
	BLOCK_ANCIENT_DEBRIS_STEP(new String[0]),
	BLOCK_ANVIL_BREAK(new String[]{"ANVIL_BREAK"}),
	BLOCK_ANVIL_DESTROY(new String[0]),
	BLOCK_ANVIL_FALL(new String[0]),
	BLOCK_ANVIL_HIT(new String[]{"BLOCK_ANVIL_FALL"}),
	BLOCK_ANVIL_LAND(new String[]{"ANVIL_LAND"}),
	BLOCK_ANVIL_PLACE(new String[]{"BLOCK_ANVIL_FALL"}),
	BLOCK_ANVIL_STEP(new String[]{"BLOCK_ANVIL_FALL"}),
	BLOCK_ANVIL_USE(new String[]{"ANVIL_USE"}),
	BLOCK_AZALEA_BREAK(new String[0]),
	BLOCK_AZALEA_FALL(new String[0]),
	BLOCK_AZALEA_HIT(new String[0]),
	BLOCK_AZALEA_LEAVES_BREAK(new String[0]),
	BLOCK_AZALEA_LEAVES_FALL(new String[0]),
	BLOCK_AZALEA_LEAVES_HIT(new String[0]),
	BLOCK_AZALEA_LEAVES_PLACE(new String[0]),
	BLOCK_AZALEA_LEAVES_STEP(new String[0]),
	BLOCK_AZALEA_PLACE(new String[0]),
	BLOCK_AZALEA_STEP(new String[0]),
	BLOCK_BAMBOO_BREAK(new String[0]),
	BLOCK_BAMBOO_FALL(new String[0]),
	BLOCK_BAMBOO_HIT(new String[0]),
	BLOCK_BAMBOO_PLACE(new String[0]),
	BLOCK_BAMBOO_SAPLING_BREAK(new String[0]),
	BLOCK_BAMBOO_SAPLING_HIT(new String[0]),
	BLOCK_BAMBOO_SAPLING_PLACE(new String[0]),
	BLOCK_BAMBOO_STEP(new String[0]),
	BLOCK_BAMBOO_WOOD_BREAK(new String[0]),
	BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF(new String[0]),
	BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON(new String[0]),
	BLOCK_BAMBOO_WOOD_DOOR_CLOSE(new String[0]),
	BLOCK_BAMBOO_WOOD_DOOR_OPEN(new String[0]),
	BLOCK_BAMBOO_WOOD_FALL(new String[0]),
	BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE(new String[0]),
	BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN(new String[0]),
	BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK(new String[0]),
	BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL(new String[0]),
	BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT(new String[0]),
	BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE(new String[0]),
	BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP(new String[0]),
	BLOCK_BAMBOO_WOOD_HIT(new String[0]),
	BLOCK_BAMBOO_WOOD_PLACE(new String[0]),
	BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF(new String[0]),
	BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON(new String[0]),
	BLOCK_BAMBOO_WOOD_STEP(new String[0]),
	BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN(new String[0]),
	BLOCK_BARREL_CLOSE(new String[0]),
	BLOCK_BARREL_OPEN(new String[0]),
	BLOCK_BASALT_BREAK(new String[0]),
	BLOCK_BASALT_FALL(new String[0]),
	BLOCK_BASALT_HIT(new String[0]),
	BLOCK_BASALT_PLACE(new String[0]),
	BLOCK_BASALT_STEP(new String[0]),
	BLOCK_BEACON_ACTIVATE(new String[0]),
	BLOCK_BEACON_AMBIENT(new String[0]),
	BLOCK_BEACON_DEACTIVATE(new String[]{"BLOCK_BEACON_AMBIENT"}),
	BLOCK_BEACON_POWER_SELECT(new String[]{"BLOCK_BEACON_AMBIENT"}),
	BLOCK_BEEHIVE_DRIP(new String[0]),
	BLOCK_BEEHIVE_ENTER(new String[0]),
	BLOCK_BEEHIVE_EXIT(new String[0]),
	BLOCK_BEEHIVE_SHEAR(new String[0]),
	BLOCK_BEEHIVE_WORK(new String[0]),
	BLOCK_BELL_RESONATE(new String[0]),
	BLOCK_BELL_USE(new String[0]),
	BLOCK_BIG_DRIPLEAF_BREAK(new String[0]),
	BLOCK_BIG_DRIPLEAF_FALL(new String[0]),
	BLOCK_BIG_DRIPLEAF_HIT(new String[0]),
	BLOCK_BIG_DRIPLEAF_PLACE(new String[0]),
	BLOCK_BIG_DRIPLEAF_STEP(new String[0]),
	BLOCK_BIG_DRIPLEAF_TILT_DOWN(new String[0]),
	BLOCK_BIG_DRIPLEAF_TILT_UP(new String[0]),
	BLOCK_BLASTFURNACE_FIRE_CRACKLE(new String[0]),
	BLOCK_BONE_BLOCK_BREAK(new String[0]),
	BLOCK_BONE_BLOCK_FALL(new String[0]),
	BLOCK_BONE_BLOCK_HIT(new String[0]),
	BLOCK_BONE_BLOCK_PLACE(new String[0]),
	BLOCK_BONE_BLOCK_STEP(new String[0]),
	BLOCK_BREWING_STAND_BREW(new String[0]),
	BLOCK_BUBBLE_COLUMN_BUBBLE_POP(new String[0]),
	BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT(new String[0]),
	BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE(new String[0]),
	BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT(new String[0]),
	BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE(new String[0]),
	BLOCK_CAKE_ADD_CANDLE(new String[0]),
	BLOCK_CALCITE_BREAK(new String[0]),
	BLOCK_CALCITE_FALL(new String[0]),
	BLOCK_CALCITE_HIT(new String[0]),
	BLOCK_CALCITE_PLACE(new String[0]),
	BLOCK_CALCITE_STEP(new String[0]),
	BLOCK_CAMPFIRE_CRACKLE(new String[0]),
	BLOCK_CANDLE_AMBIENT(new String[0]),
	BLOCK_CANDLE_BREAK(new String[0]),
	BLOCK_CANDLE_EXTINGUISH(new String[0]),
	BLOCK_CANDLE_FALL(new String[0]),
	BLOCK_CANDLE_HIT(new String[0]),
	BLOCK_CANDLE_PLACE(new String[0]),
	BLOCK_CANDLE_STEP(new String[0]),
	BLOCK_CAVE_VINES_BREAK(new String[0]),
	BLOCK_CAVE_VINES_FALL(new String[0]),
	BLOCK_CAVE_VINES_HIT(new String[0]),
	BLOCK_CAVE_VINES_PICK_BERRIES(new String[0]),
	BLOCK_CAVE_VINES_PLACE(new String[0]),
	BLOCK_CAVE_VINES_STEP(new String[0]),
	BLOCK_CHAIN_BREAK(new String[0]),
	BLOCK_CHAIN_FALL(new String[0]),
	BLOCK_CHAIN_HIT(new String[0]),
	BLOCK_CHAIN_PLACE(new String[0]),
	BLOCK_CHAIN_STEP(new String[0]),
	BLOCK_CHERRY_LEAVES_BREAK(new String[0]),
	BLOCK_CHERRY_LEAVES_FALL(new String[0]),
	BLOCK_CHERRY_LEAVES_HIT(new String[0]),
	BLOCK_CHERRY_LEAVES_PLACE(new String[0]),
	BLOCK_CHERRY_LEAVES_STEP(new String[0]),
	BLOCK_CHERRY_SAPLING_BREAK(new String[0]),
	BLOCK_CHERRY_SAPLING_FALL(new String[0]),
	BLOCK_CHERRY_SAPLING_HIT(new String[0]),
	BLOCK_CHERRY_SAPLING_PLACE(new String[0]),
	BLOCK_CHERRY_SAPLING_STEP(new String[0]),
	BLOCK_CHERRY_WOOD_BREAK(new String[0]),
	BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF(new String[0]),
	BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON(new String[0]),
	BLOCK_CHERRY_WOOD_DOOR_CLOSE(new String[0]),
	BLOCK_CHERRY_WOOD_DOOR_OPEN(new String[0]),
	BLOCK_CHERRY_WOOD_FALL(new String[0]),
	BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE(new String[0]),
	BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN(new String[0]),
	BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK(new String[0]),
	BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL(new String[0]),
	BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT(new String[0]),
	BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE(new String[0]),
	BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP(new String[0]),
	BLOCK_CHERRY_WOOD_HIT(new String[0]),
	BLOCK_CHERRY_WOOD_PLACE(new String[0]),
	BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF(new String[0]),
	BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON(new String[0]),
	BLOCK_CHERRY_WOOD_STEP(new String[0]),
	BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN(new String[0]),
	BLOCK_CHEST_CLOSE(new String[]{"CHEST_CLOSE", "ENTITY_CHEST_CLOSE"}),
	BLOCK_CHEST_LOCKED(new String[0]),
	BLOCK_CHEST_OPEN(new String[]{"CHEST_OPEN", "ENTITY_CHEST_OPEN"}),
	BLOCK_CHISELED_BOOKSHELF_BREAK(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_FALL(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_HIT(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_INSERT(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_PICKUP(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_PLACE(new String[0]),
	BLOCK_CHISELED_BOOKSHELF_STEP(new String[0]),
	BLOCK_CHORUS_FLOWER_DEATH(new String[0]),
	BLOCK_CHORUS_FLOWER_GROW(new String[0]),
	BLOCK_COMPARATOR_CLICK(new String[0]),
	BLOCK_COMPOSTER_EMPTY(new String[0]),
	BLOCK_COMPOSTER_FILL(new String[0]),
	BLOCK_COMPOSTER_FILL_SUCCESS(new String[0]),
	BLOCK_COMPOSTER_READY(new String[0]),
	BLOCK_CONDUIT_ACTIVATE(new String[0]),
	BLOCK_CONDUIT_AMBIENT(new String[0]),
	BLOCK_CONDUIT_AMBIENT_SHORT(new String[0]),
	BLOCK_CONDUIT_ATTACK_TARGET(new String[0]),
	BLOCK_CONDUIT_DEACTIVATE(new String[0]),
	BLOCK_COPPER_BREAK(new String[0]),
	BLOCK_COPPER_BULB_BREAK(new String[0]),
	BLOCK_COPPER_BULB_FALL(new String[0]),
	BLOCK_COPPER_BULB_HIT(new String[0]),
	BLOCK_COPPER_BULB_PLACE(new String[0]),
	BLOCK_COPPER_BULB_STEP(new String[0]),
	BLOCK_COPPER_BULB_TURN_OFF(new String[0]),
	BLOCK_COPPER_BULB_TURN_ON(new String[0]),
	BLOCK_COPPER_DOOR_CLOSE(new String[0]),
	BLOCK_COPPER_DOOR_OPEN(new String[0]),
	BLOCK_COPPER_FALL(new String[0]),
	BLOCK_COPPER_GRATE_BREAK(new String[0]),
	BLOCK_COPPER_GRATE_FALL(new String[0]),
	BLOCK_COPPER_GRATE_HIT(new String[0]),
	BLOCK_COPPER_GRATE_PLACE(new String[0]),
	BLOCK_COPPER_GRATE_STEP(new String[0]),
	BLOCK_COPPER_HIT(new String[0]),
	BLOCK_COPPER_PLACE(new String[0]),
	BLOCK_COPPER_STEP(new String[0]),
	BLOCK_COPPER_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_COPPER_TRAPDOOR_OPEN(new String[0]),
	BLOCK_CORAL_BLOCK_BREAK(new String[0]),
	BLOCK_CORAL_BLOCK_FALL(new String[0]),
	BLOCK_CORAL_BLOCK_HIT(new String[0]),
	BLOCK_CORAL_BLOCK_PLACE(new String[0]),
	BLOCK_CORAL_BLOCK_STEP(new String[0]),
	BLOCK_CRAFTER_CRAFT(new String[0]),
	BLOCK_CRAFTER_FAIL(new String[0]),
	BLOCK_CROP_BREAK(new String[0]),
	BLOCK_DECORATED_POT_BREAK(new String[0]),
	BLOCK_DECORATED_POT_FALL(new String[0]),
	BLOCK_DECORATED_POT_HIT(new String[0]),
	BLOCK_DECORATED_POT_INSERT(new String[0]),
	BLOCK_DECORATED_POT_INSERT_FAIL(new String[0]),
	BLOCK_DECORATED_POT_PLACE(new String[0]),
	BLOCK_DECORATED_POT_SHATTER(new String[0]),
	BLOCK_DECORATED_POT_STEP(new String[0]),
	BLOCK_DEEPSLATE_BREAK(new String[0]),
	BLOCK_DEEPSLATE_BRICKS_BREAK(new String[0]),
	BLOCK_DEEPSLATE_BRICKS_FALL(new String[0]),
	BLOCK_DEEPSLATE_BRICKS_HIT(new String[0]),
	BLOCK_DEEPSLATE_BRICKS_PLACE(new String[0]),
	BLOCK_DEEPSLATE_BRICKS_STEP(new String[0]),
	BLOCK_DEEPSLATE_FALL(new String[0]),
	BLOCK_DEEPSLATE_HIT(new String[0]),
	BLOCK_DEEPSLATE_PLACE(new String[0]),
	BLOCK_DEEPSLATE_STEP(new String[0]),
	BLOCK_DEEPSLATE_TILES_BREAK(new String[0]),
	BLOCK_DEEPSLATE_TILES_FALL(new String[0]),
	BLOCK_DEEPSLATE_TILES_HIT(new String[0]),
	BLOCK_DEEPSLATE_TILES_PLACE(new String[0]),
	BLOCK_DEEPSLATE_TILES_STEP(new String[0]),
	BLOCK_DISPENSER_DISPENSE(new String[0]),
	BLOCK_DISPENSER_FAIL(new String[0]),
	BLOCK_DISPENSER_LAUNCH(new String[0]),
	BLOCK_DRIPSTONE_BLOCK_BREAK(new String[0]),
	BLOCK_DRIPSTONE_BLOCK_FALL(new String[0]),
	BLOCK_DRIPSTONE_BLOCK_HIT(new String[0]),
	BLOCK_DRIPSTONE_BLOCK_PLACE(new String[0]),
	BLOCK_DRIPSTONE_BLOCK_STEP(new String[0]),
	BLOCK_ENCHANTMENT_TABLE_USE(new String[0]),
	BLOCK_ENDER_CHEST_CLOSE(new String[0]),
	BLOCK_ENDER_CHEST_OPEN(new String[0]),
	BLOCK_END_GATEWAY_SPAWN(new String[0]),
	BLOCK_END_PORTAL_FRAME_FILL(new String[0]),
	BLOCK_END_PORTAL_SPAWN(new String[0]),
	BLOCK_FENCE_GATE_CLOSE(new String[0]),
	BLOCK_FENCE_GATE_OPEN(new String[0]),
	BLOCK_FIRE_AMBIENT(new String[]{"FIRE"}),
	BLOCK_FIRE_EXTINGUISH(new String[]{"FIZZ"}),
	BLOCK_FLOWERING_AZALEA_BREAK(new String[0]),
	BLOCK_FLOWERING_AZALEA_FALL(new String[0]),
	BLOCK_FLOWERING_AZALEA_HIT(new String[0]),
	BLOCK_FLOWERING_AZALEA_PLACE(new String[0]),
	BLOCK_FLOWERING_AZALEA_STEP(new String[0]),
	BLOCK_FROGLIGHT_BREAK(new String[0]),
	BLOCK_FROGLIGHT_FALL(new String[0]),
	BLOCK_FROGLIGHT_HIT(new String[0]),
	BLOCK_FROGLIGHT_PLACE(new String[0]),
	BLOCK_FROGLIGHT_STEP(new String[0]),
	BLOCK_FROGSPAWN_BREAK(new String[0]),
	BLOCK_FROGSPAWN_FALL(new String[0]),
	BLOCK_FROGSPAWN_HATCH(new String[0]),
	BLOCK_FROGSPAWN_HIT(new String[0]),
	BLOCK_FROGSPAWN_PLACE(new String[0]),
	BLOCK_FROGSPAWN_STEP(new String[0]),
	BLOCK_FUNGUS_BREAK(new String[0]),
	BLOCK_FUNGUS_FALL(new String[0]),
	BLOCK_FUNGUS_HIT(new String[0]),
	BLOCK_FUNGUS_PLACE(new String[0]),
	BLOCK_FUNGUS_STEP(new String[0]),
	BLOCK_FURNACE_FIRE_CRACKLE(new String[0]),
	BLOCK_GILDED_BLACKSTONE_BREAK(new String[0]),
	BLOCK_GILDED_BLACKSTONE_FALL(new String[0]),
	BLOCK_GILDED_BLACKSTONE_HIT(new String[0]),
	BLOCK_GILDED_BLACKSTONE_PLACE(new String[0]),
	BLOCK_GILDED_BLACKSTONE_STEP(new String[0]),
	BLOCK_GLASS_BREAK(new String[]{"GLASS"}),
	BLOCK_GLASS_FALL(new String[0]),
	BLOCK_GLASS_HIT(new String[0]),
	BLOCK_GLASS_PLACE(new String[0]),
	BLOCK_GLASS_STEP(new String[0]),
	BLOCK_GRASS_BREAK(new String[]{"DIG_GRASS"}),
	BLOCK_GRASS_FALL(new String[0]),
	BLOCK_GRASS_HIT(new String[0]),
	BLOCK_GRASS_PLACE(new String[0]),
	BLOCK_GRASS_STEP(new String[]{"STEP_GRASS"}),
	BLOCK_GRAVEL_BREAK(new String[]{"DIG_GRAVEL"}),
	BLOCK_GRAVEL_FALL(new String[0]),
	BLOCK_GRAVEL_HIT(new String[0]),
	BLOCK_GRAVEL_PLACE(new String[0]),
	BLOCK_GRAVEL_STEP(new String[]{"STEP_GRAVEL"}),
	BLOCK_GRINDSTONE_USE(new String[0]),
	BLOCK_GROWING_PLANT_CROP(new String[0]),
	BLOCK_HANGING_ROOTS_BREAK(new String[0]),
	BLOCK_HANGING_ROOTS_FALL(new String[0]),
	BLOCK_HANGING_ROOTS_HIT(new String[0]),
	BLOCK_HANGING_ROOTS_PLACE(new String[0]),
	BLOCK_HANGING_ROOTS_STEP(new String[0]),
	BLOCK_HANGING_SIGN_BREAK(new String[0]),
	BLOCK_HANGING_SIGN_FALL(new String[0]),
	BLOCK_HANGING_SIGN_HIT(new String[0]),
	BLOCK_HANGING_SIGN_PLACE(new String[0]),
	BLOCK_HANGING_SIGN_STEP(new String[0]),
	BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL(new String[0]),
	BLOCK_HONEY_BLOCK_BREAK(new String[0]),
	BLOCK_HONEY_BLOCK_FALL(new String[0]),
	BLOCK_HONEY_BLOCK_HIT(new String[0]),
	BLOCK_HONEY_BLOCK_PLACE(new String[0]),
	BLOCK_HONEY_BLOCK_SLIDE(new String[0]),
	BLOCK_HONEY_BLOCK_STEP(new String[0]),
	BLOCK_IRON_DOOR_CLOSE(new String[0]),
	BLOCK_IRON_DOOR_OPEN(new String[0]),
	BLOCK_IRON_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_IRON_TRAPDOOR_OPEN(new String[0]),
	BLOCK_LADDER_BREAK(new String[0]),
	BLOCK_LADDER_FALL(new String[0]),
	BLOCK_LADDER_HIT(new String[0]),
	BLOCK_LADDER_PLACE(new String[0]),
	BLOCK_LADDER_STEP(new String[]{"STEP_LADDER"}),
	BLOCK_LANTERN_BREAK(new String[0]),
	BLOCK_LANTERN_FALL(new String[0]),
	BLOCK_LANTERN_HIT(new String[0]),
	BLOCK_LANTERN_PLACE(new String[0]),
	BLOCK_LANTERN_STEP(new String[0]),
	BLOCK_LARGE_AMETHYST_BUD_BREAK(new String[0]),
	BLOCK_LARGE_AMETHYST_BUD_PLACE(new String[0]),
	BLOCK_LAVA_AMBIENT(new String[]{"LAVA"}),
	BLOCK_LAVA_EXTINGUISH(new String[0]),
	BLOCK_LAVA_POP(new String[]{"LAVA_POP"}),
	BLOCK_LEVER_CLICK(new String[0]),
	BLOCK_LILY_PAD_PLACE(new String[]{"BLOCK_WATERLILY_PLACE"}),
	BLOCK_LODESTONE_BREAK(new String[0]),
	BLOCK_LODESTONE_FALL(new String[0]),
	BLOCK_LODESTONE_HIT(new String[0]),
	BLOCK_LODESTONE_PLACE(new String[0]),
	BLOCK_LODESTONE_STEP(new String[0]),
	BLOCK_MANGROVE_ROOTS_BREAK(new String[0]),
	BLOCK_MANGROVE_ROOTS_FALL(new String[0]),
	BLOCK_MANGROVE_ROOTS_HIT(new String[0]),
	BLOCK_MANGROVE_ROOTS_PLACE(new String[0]),
	BLOCK_MANGROVE_ROOTS_STEP(new String[0]),
	BLOCK_MEDIUM_AMETHYST_BUD_BREAK(new String[0]),
	BLOCK_MEDIUM_AMETHYST_BUD_PLACE(new String[0]),
	BLOCK_METAL_BREAK(new String[0]),
	BLOCK_METAL_FALL(new String[0]),
	BLOCK_METAL_HIT(new String[0]),
	BLOCK_METAL_PLACE(new String[0]),
	BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF(new String[]{"BLOCK_METAL_PRESSUREPLATE_CLICK_OFF"}),
	BLOCK_METAL_PRESSURE_PLATE_CLICK_ON(new String[]{"BLOCK_METAL_PRESSUREPLATE_CLICK_ON"}),
	BLOCK_METAL_STEP(new String[0]),
	BLOCK_MOSS_BREAK(new String[0]),
	BLOCK_MOSS_CARPET_BREAK(new String[0]),
	BLOCK_MOSS_CARPET_FALL(new String[0]),
	BLOCK_MOSS_CARPET_HIT(new String[0]),
	BLOCK_MOSS_CARPET_PLACE(new String[0]),
	BLOCK_MOSS_CARPET_STEP(new String[0]),
	BLOCK_MOSS_FALL(new String[0]),
	BLOCK_MOSS_HIT(new String[0]),
	BLOCK_MOSS_PLACE(new String[0]),
	BLOCK_MOSS_STEP(new String[0]),
	BLOCK_MUDDY_MANGROVE_ROOTS_BREAK(new String[0]),
	BLOCK_MUDDY_MANGROVE_ROOTS_FALL(new String[0]),
	BLOCK_MUDDY_MANGROVE_ROOTS_HIT(new String[0]),
	BLOCK_MUDDY_MANGROVE_ROOTS_PLACE(new String[0]),
	BLOCK_MUDDY_MANGROVE_ROOTS_STEP(new String[0]),
	BLOCK_MUD_BREAK(new String[0]),
	BLOCK_MUD_BRICKS_BREAK(new String[0]),
	BLOCK_MUD_BRICKS_FALL(new String[0]),
	BLOCK_MUD_BRICKS_HIT(new String[0]),
	BLOCK_MUD_BRICKS_PLACE(new String[0]),
	BLOCK_MUD_BRICKS_STEP(new String[0]),
	BLOCK_MUD_FALL(new String[0]),
	BLOCK_MUD_HIT(new String[0]),
	BLOCK_MUD_PLACE(new String[0]),
	BLOCK_MUD_STEP(new String[0]),
	BLOCK_NETHERITE_BLOCK_BREAK(new String[0]),
	BLOCK_NETHERITE_BLOCK_FALL(new String[0]),
	BLOCK_NETHERITE_BLOCK_HIT(new String[0]),
	BLOCK_NETHERITE_BLOCK_PLACE(new String[0]),
	BLOCK_NETHERITE_BLOCK_STEP(new String[0]),
	BLOCK_NETHERRACK_BREAK(new String[0]),
	BLOCK_NETHERRACK_FALL(new String[0]),
	BLOCK_NETHERRACK_HIT(new String[0]),
	BLOCK_NETHERRACK_PLACE(new String[0]),
	BLOCK_NETHERRACK_STEP(new String[0]),
	BLOCK_NETHER_BRICKS_BREAK(new String[0]),
	BLOCK_NETHER_BRICKS_FALL(new String[0]),
	BLOCK_NETHER_BRICKS_HIT(new String[0]),
	BLOCK_NETHER_BRICKS_PLACE(new String[0]),
	BLOCK_NETHER_BRICKS_STEP(new String[0]),
	BLOCK_NETHER_GOLD_ORE_BREAK(new String[0]),
	BLOCK_NETHER_GOLD_ORE_FALL(new String[0]),
	BLOCK_NETHER_GOLD_ORE_HIT(new String[0]),
	BLOCK_NETHER_GOLD_ORE_PLACE(new String[0]),
	BLOCK_NETHER_GOLD_ORE_STEP(new String[0]),
	BLOCK_NETHER_ORE_BREAK(new String[0]),
	BLOCK_NETHER_ORE_FALL(new String[0]),
	BLOCK_NETHER_ORE_HIT(new String[0]),
	BLOCK_NETHER_ORE_PLACE(new String[0]),
	BLOCK_NETHER_ORE_STEP(new String[0]),
	BLOCK_NETHER_SPROUTS_BREAK(new String[0]),
	BLOCK_NETHER_SPROUTS_FALL(new String[0]),
	BLOCK_NETHER_SPROUTS_HIT(new String[0]),
	BLOCK_NETHER_SPROUTS_PLACE(new String[0]),
	BLOCK_NETHER_SPROUTS_STEP(new String[0]),
	BLOCK_NETHER_WART_BREAK(new String[0]),
	BLOCK_NETHER_WOOD_BREAK(new String[0]),
	BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF(new String[0]),
	BLOCK_NETHER_WOOD_BUTTON_CLICK_ON(new String[0]),
	BLOCK_NETHER_WOOD_DOOR_CLOSE(new String[0]),
	BLOCK_NETHER_WOOD_DOOR_OPEN(new String[0]),
	BLOCK_NETHER_WOOD_FALL(new String[0]),
	BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE(new String[0]),
	BLOCK_NETHER_WOOD_FENCE_GATE_OPEN(new String[0]),
	BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK(new String[0]),
	BLOCK_NETHER_WOOD_HANGING_SIGN_FALL(new String[0]),
	BLOCK_NETHER_WOOD_HANGING_SIGN_HIT(new String[0]),
	BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE(new String[0]),
	BLOCK_NETHER_WOOD_HANGING_SIGN_STEP(new String[0]),
	BLOCK_NETHER_WOOD_HIT(new String[0]),
	BLOCK_NETHER_WOOD_PLACE(new String[0]),
	BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF(new String[0]),
	BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON(new String[0]),
	BLOCK_NETHER_WOOD_STEP(new String[0]),
	BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_NETHER_WOOD_TRAPDOOR_OPEN(new String[0]),
	BLOCK_NOTE_BLOCK_BANJO(new String[0]),
	BLOCK_NOTE_BLOCK_BASEDRUM(new String[]{"NOTE_BASS_DRUM", "BLOCK_NOTE_BASEDRUM"}),
	BLOCK_NOTE_BLOCK_BASS(new String[]{"NOTE_BASS", "BLOCK_NOTE_BASS"}),
	BLOCK_NOTE_BLOCK_BELL(new String[]{"BLOCK_NOTE_BELL"}),
	BLOCK_NOTE_BLOCK_BIT(new String[0]),
	BLOCK_NOTE_BLOCK_CHIME(new String[]{"BLOCK_NOTE_CHIME"}),
	BLOCK_NOTE_BLOCK_COW_BELL(new String[0]),
	BLOCK_NOTE_BLOCK_DIDGERIDOO(new String[0]),
	BLOCK_NOTE_BLOCK_FLUTE(new String[]{"BLOCK_NOTE_FLUTE"}),
	BLOCK_NOTE_BLOCK_GUITAR(new String[]{"NOTE_BASS_GUITAR", "BLOCK_NOTE_GUITAR"}),
	BLOCK_NOTE_BLOCK_HARP(new String[]{"NOTE_PIANO", "BLOCK_NOTE_HARP"}),
	BLOCK_NOTE_BLOCK_HAT(new String[]{"NOTE_STICKS", "BLOCK_NOTE_HAT"}),
	BLOCK_NOTE_BLOCK_IMITATE_CREEPER(new String[0]),
	BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON(new String[0]),
	BLOCK_NOTE_BLOCK_IMITATE_PIGLIN(new String[0]),
	BLOCK_NOTE_BLOCK_IMITATE_SKELETON(new String[0]),
	BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON(new String[0]),
	BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE(new String[0]),
	BLOCK_NOTE_BLOCK_IRON_XYLOPHONE(new String[0]),
	BLOCK_NOTE_BLOCK_PLING(new String[]{"NOTE_PLING", "BLOCK_NOTE_PLING"}),
	BLOCK_NOTE_BLOCK_SNARE(new String[]{"NOTE_SNARE_DRUM", "BLOCK_NOTE_SNARE"}),
	BLOCK_NOTE_BLOCK_XYLOPHONE(new String[]{"BLOCK_NOTE_XYLOPHONE"}),
	BLOCK_NYLIUM_BREAK(new String[0]),
	BLOCK_NYLIUM_FALL(new String[0]),
	BLOCK_NYLIUM_HIT(new String[0]),
	BLOCK_NYLIUM_PLACE(new String[0]),
	BLOCK_NYLIUM_STEP(new String[0]),
	BLOCK_PACKED_MUD_BREAK(new String[0]),
	BLOCK_PACKED_MUD_FALL(new String[0]),
	BLOCK_PACKED_MUD_HIT(new String[0]),
	BLOCK_PACKED_MUD_PLACE(new String[0]),
	BLOCK_PACKED_MUD_STEP(new String[0]),
	BLOCK_PINK_PETALS_BREAK(new String[0]),
	BLOCK_PINK_PETALS_FALL(new String[0]),
	BLOCK_PINK_PETALS_HIT(new String[0]),
	BLOCK_PINK_PETALS_PLACE(new String[0]),
	BLOCK_PINK_PETALS_STEP(new String[0]),
	BLOCK_PISTON_CONTRACT(new String[]{"PISTON_RETRACT"}),
	BLOCK_PISTON_EXTEND(new String[]{"PISTON_EXTEND"}),
	BLOCK_POINTED_DRIPSTONE_BREAK(new String[0]),
	BLOCK_POINTED_DRIPSTONE_DRIP_LAVA(new String[0]),
	BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON(new String[0]),
	BLOCK_POINTED_DRIPSTONE_DRIP_WATER(new String[0]),
	BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON(new String[0]),
	BLOCK_POINTED_DRIPSTONE_FALL(new String[0]),
	BLOCK_POINTED_DRIPSTONE_HIT(new String[0]),
	BLOCK_POINTED_DRIPSTONE_LAND(new String[0]),
	BLOCK_POINTED_DRIPSTONE_PLACE(new String[0]),
	BLOCK_POINTED_DRIPSTONE_STEP(new String[0]),
	BLOCK_POLISHED_DEEPSLATE_BREAK(new String[0]),
	BLOCK_POLISHED_DEEPSLATE_FALL(new String[0]),
	BLOCK_POLISHED_DEEPSLATE_HIT(new String[0]),
	BLOCK_POLISHED_DEEPSLATE_PLACE(new String[0]),
	BLOCK_POLISHED_DEEPSLATE_STEP(new String[0]),
	BLOCK_POLISHED_TUFF_BREAK(new String[0]),
	BLOCK_POLISHED_TUFF_FALL(new String[0]),
	BLOCK_POLISHED_TUFF_HIT(new String[0]),
	BLOCK_POLISHED_TUFF_PLACE(new String[0]),
	BLOCK_POLISHED_TUFF_STEP(new String[0]),
	BLOCK_PORTAL_AMBIENT(new String[]{"PORTAL"}),
	BLOCK_PORTAL_TRAVEL(new String[]{"PORTAL_TRAVEL"}),
	BLOCK_PORTAL_TRIGGER(new String[]{"PORTAL_TRIGGER"}),
	BLOCK_POWDER_SNOW_BREAK(new String[0]),
	BLOCK_POWDER_SNOW_FALL(new String[0]),
	BLOCK_POWDER_SNOW_HIT(new String[0]),
	BLOCK_POWDER_SNOW_PLACE(new String[0]),
	BLOCK_POWDER_SNOW_STEP(new String[0]),
	BLOCK_PUMPKIN_CARVE(new String[0]),
	BLOCK_REDSTONE_TORCH_BURNOUT(new String[0]),
	BLOCK_RESPAWN_ANCHOR_AMBIENT(new String[0]),
	BLOCK_RESPAWN_ANCHOR_CHARGE(new String[0]),
	BLOCK_RESPAWN_ANCHOR_DEPLETE(new String[0]),
	BLOCK_RESPAWN_ANCHOR_SET_SPAWN(new String[0]),
	BLOCK_ROOTED_DIRT_BREAK(new String[0]),
	BLOCK_ROOTED_DIRT_FALL(new String[0]),
	BLOCK_ROOTED_DIRT_HIT(new String[0]),
	BLOCK_ROOTED_DIRT_PLACE(new String[0]),
	BLOCK_ROOTED_DIRT_STEP(new String[0]),
	BLOCK_ROOTS_BREAK(new String[0]),
	BLOCK_ROOTS_FALL(new String[0]),
	BLOCK_ROOTS_HIT(new String[0]),
	BLOCK_ROOTS_PLACE(new String[0]),
	BLOCK_ROOTS_STEP(new String[0]),
	BLOCK_SAND_BREAK(new String[]{"DIG_SAND"}),
	BLOCK_SAND_FALL(new String[0]),
	BLOCK_SAND_HIT(new String[0]),
	BLOCK_SAND_PLACE(new String[0]),
	BLOCK_SAND_STEP(new String[]{"STEP_SAND"}),
	BLOCK_SCAFFOLDING_BREAK(new String[0]),
	BLOCK_SCAFFOLDING_FALL(new String[0]),
	BLOCK_SCAFFOLDING_HIT(new String[0]),
	BLOCK_SCAFFOLDING_PLACE(new String[0]),
	BLOCK_SCAFFOLDING_STEP(new String[0]),
	BLOCK_SCULK_BREAK(new String[0]),
	BLOCK_SCULK_CATALYST_BLOOM(new String[0]),
	BLOCK_SCULK_CATALYST_BREAK(new String[0]),
	BLOCK_SCULK_CATALYST_FALL(new String[0]),
	BLOCK_SCULK_CATALYST_HIT(new String[0]),
	BLOCK_SCULK_CATALYST_PLACE(new String[0]),
	BLOCK_SCULK_CATALYST_STEP(new String[0]),
	BLOCK_SCULK_CHARGE(new String[0]),
	BLOCK_SCULK_FALL(new String[0]),
	BLOCK_SCULK_HIT(new String[0]),
	BLOCK_SCULK_PLACE(new String[0]),
	BLOCK_SCULK_SENSOR_BREAK(new String[0]),
	BLOCK_SCULK_SENSOR_CLICKING(new String[0]),
	BLOCK_SCULK_SENSOR_CLICKING_STOP(new String[0]),
	BLOCK_SCULK_SENSOR_FALL(new String[0]),
	BLOCK_SCULK_SENSOR_HIT(new String[0]),
	BLOCK_SCULK_SENSOR_PLACE(new String[0]),
	BLOCK_SCULK_SENSOR_STEP(new String[0]),
	BLOCK_SCULK_SHRIEKER_BREAK(new String[0]),
	BLOCK_SCULK_SHRIEKER_FALL(new String[0]),
	BLOCK_SCULK_SHRIEKER_HIT(new String[0]),
	BLOCK_SCULK_SHRIEKER_PLACE(new String[0]),
	BLOCK_SCULK_SHRIEKER_SHRIEK(new String[0]),
	BLOCK_SCULK_SHRIEKER_STEP(new String[0]),
	BLOCK_SCULK_SPREAD(new String[0]),
	BLOCK_SCULK_STEP(new String[0]),
	BLOCK_SCULK_VEIN_BREAK(new String[0]),
	BLOCK_SCULK_VEIN_FALL(new String[0]),
	BLOCK_SCULK_VEIN_HIT(new String[0]),
	BLOCK_SCULK_VEIN_PLACE(new String[0]),
	BLOCK_SCULK_VEIN_STEP(new String[0]),
	BLOCK_SHROOMLIGHT_BREAK(new String[0]),
	BLOCK_SHROOMLIGHT_FALL(new String[0]),
	BLOCK_SHROOMLIGHT_HIT(new String[0]),
	BLOCK_SHROOMLIGHT_PLACE(new String[0]),
	BLOCK_SHROOMLIGHT_STEP(new String[0]),
	BLOCK_SHULKER_BOX_CLOSE(new String[0]),
	BLOCK_SHULKER_BOX_OPEN(new String[0]),
	BLOCK_SIGN_WAXED_INTERACT_FAIL(new String[0]),
	BLOCK_SLIME_BLOCK_BREAK(new String[]{"BLOCK_SLIME_BREAK"}),
	BLOCK_SLIME_BLOCK_FALL(new String[]{"BLOCK_SLIME_FALL"}),
	BLOCK_SLIME_BLOCK_HIT(new String[]{"BLOCK_SLIME_HIT"}),
	BLOCK_SLIME_BLOCK_PLACE(new String[]{"BLOCK_SLIME_PLACE"}),
	BLOCK_SLIME_BLOCK_STEP(new String[]{"BLOCK_SLIME_STEP"}),
	BLOCK_SMALL_AMETHYST_BUD_BREAK(new String[0]),
	BLOCK_SMALL_AMETHYST_BUD_PLACE(new String[0]),
	BLOCK_SMALL_DRIPLEAF_BREAK(new String[0]),
	BLOCK_SMALL_DRIPLEAF_FALL(new String[0]),
	BLOCK_SMALL_DRIPLEAF_HIT(new String[0]),
	BLOCK_SMALL_DRIPLEAF_PLACE(new String[0]),
	BLOCK_SMALL_DRIPLEAF_STEP(new String[0]),
	BLOCK_SMITHING_TABLE_USE(new String[0]),
	BLOCK_SMOKER_SMOKE(new String[0]),
	BLOCK_SNIFFER_EGG_CRACK(new String[0]),
	BLOCK_SNIFFER_EGG_HATCH(new String[0]),
	BLOCK_SNIFFER_EGG_PLOP(new String[0]),
	BLOCK_SNOW_BREAK(new String[]{"DIG_SNOW"}),
	BLOCK_SNOW_FALL(new String[0]),
	BLOCK_SNOW_HIT(new String[0]),
	BLOCK_SNOW_PLACE(new String[0]),
	BLOCK_SNOW_STEP(new String[]{"STEP_SNOW"}),
	BLOCK_SOUL_SAND_BREAK(new String[0]),
	BLOCK_SOUL_SAND_FALL(new String[0]),
	BLOCK_SOUL_SAND_HIT(new String[0]),
	BLOCK_SOUL_SAND_PLACE(new String[0]),
	BLOCK_SOUL_SAND_STEP(new String[0]),
	BLOCK_SOUL_SOIL_BREAK(new String[0]),
	BLOCK_SOUL_SOIL_FALL(new String[0]),
	BLOCK_SOUL_SOIL_HIT(new String[0]),
	BLOCK_SOUL_SOIL_PLACE(new String[0]),
	BLOCK_SOUL_SOIL_STEP(new String[0]),
	BLOCK_SPONGE_ABSORB(new String[0]),
	BLOCK_SPONGE_BREAK(new String[0]),
	BLOCK_SPONGE_FALL(new String[0]),
	BLOCK_SPONGE_HIT(new String[0]),
	BLOCK_SPONGE_PLACE(new String[0]),
	BLOCK_SPONGE_STEP(new String[0]),
	BLOCK_SPORE_BLOSSOM_BREAK(new String[0]),
	BLOCK_SPORE_BLOSSOM_FALL(new String[0]),
	BLOCK_SPORE_BLOSSOM_HIT(new String[0]),
	BLOCK_SPORE_BLOSSOM_PLACE(new String[0]),
	BLOCK_SPORE_BLOSSOM_STEP(new String[0]),
	BLOCK_STEM_BREAK(new String[0]),
	BLOCK_STEM_FALL(new String[0]),
	BLOCK_STEM_HIT(new String[0]),
	BLOCK_STEM_PLACE(new String[0]),
	BLOCK_STEM_STEP(new String[0]),
	BLOCK_STONE_BREAK(new String[]{"DIG_STONE"}),
	BLOCK_STONE_BUTTON_CLICK_OFF(new String[0]),
	BLOCK_STONE_BUTTON_CLICK_ON(new String[0]),
	BLOCK_STONE_FALL(new String[0]),
	BLOCK_STONE_HIT(new String[0]),
	BLOCK_STONE_PLACE(new String[0]),
	BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF(new String[]{"BLOCK_STONE_PRESSUREPLATE_CLICK_OFF"}),
	BLOCK_STONE_PRESSURE_PLATE_CLICK_ON(new String[]{"BLOCK_STONE_PRESSUREPLATE_CLICK_ON"}),
	BLOCK_STONE_STEP(new String[]{"STEP_STONE"}),
	BLOCK_SUSPICIOUS_GRAVEL_BREAK(new String[0]),
	BLOCK_SUSPICIOUS_GRAVEL_FALL(new String[0]),
	BLOCK_SUSPICIOUS_GRAVEL_HIT(new String[0]),
	BLOCK_SUSPICIOUS_GRAVEL_PLACE(new String[0]),
	BLOCK_SUSPICIOUS_GRAVEL_STEP(new String[0]),
	BLOCK_SUSPICIOUS_SAND_BREAK(new String[0]),
	BLOCK_SUSPICIOUS_SAND_FALL(new String[0]),
	BLOCK_SUSPICIOUS_SAND_HIT(new String[0]),
	BLOCK_SUSPICIOUS_SAND_PLACE(new String[0]),
	BLOCK_SUSPICIOUS_SAND_STEP(new String[0]),
	BLOCK_SWEET_BERRY_BUSH_BREAK(new String[0]),
	BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES(new String[]{"ITEM_SWEET_BERRIES_PICK_FROM_BUSH"}),
	BLOCK_SWEET_BERRY_BUSH_PLACE(new String[0]),
	BLOCK_TRIAL_SPAWNER_AMBIENT(new String[0]),
	BLOCK_TRIAL_SPAWNER_BREAK(new String[0]),
	BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER(new String[0]),
	BLOCK_TRIAL_SPAWNER_DETECT_PLAYER(new String[0]),
	BLOCK_TRIAL_SPAWNER_EJECT_ITEM(new String[0]),
	BLOCK_TRIAL_SPAWNER_FALL(new String[0]),
	BLOCK_TRIAL_SPAWNER_HIT(new String[0]),
	BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER(new String[0]),
	BLOCK_TRIAL_SPAWNER_PLACE(new String[0]),
	BLOCK_TRIAL_SPAWNER_SPAWN_MOB(new String[0]),
	BLOCK_TRIAL_SPAWNER_STEP(new String[0]),
	BLOCK_TRIPWIRE_ATTACH(new String[0]),
	BLOCK_TRIPWIRE_CLICK_OFF(new String[0]),
	BLOCK_TRIPWIRE_CLICK_ON(new String[0]),
	BLOCK_TRIPWIRE_DETACH(new String[0]),
	BLOCK_TUFF_BREAK(new String[0]),
	BLOCK_TUFF_BRICKS_BREAK(new String[0]),
	BLOCK_TUFF_BRICKS_FALL(new String[0]),
	BLOCK_TUFF_BRICKS_HIT(new String[0]),
	BLOCK_TUFF_BRICKS_PLACE(new String[0]),
	BLOCK_TUFF_BRICKS_STEP(new String[0]),
	BLOCK_TUFF_FALL(new String[0]),
	BLOCK_TUFF_HIT(new String[0]),
	BLOCK_TUFF_PLACE(new String[0]),
	BLOCK_TUFF_STEP(new String[0]),
	BLOCK_VINE_BREAK(new String[0]),
	BLOCK_VINE_FALL(new String[0]),
	BLOCK_VINE_HIT(new String[0]),
	BLOCK_VINE_PLACE(new String[0]),
	BLOCK_VINE_STEP(new String[0]),
	BLOCK_WART_BLOCK_BREAK(new String[0]),
	BLOCK_WART_BLOCK_FALL(new String[0]),
	BLOCK_WART_BLOCK_HIT(new String[0]),
	BLOCK_WART_BLOCK_PLACE(new String[0]),
	BLOCK_WART_BLOCK_STEP(new String[0]),
	BLOCK_WATER_AMBIENT(new String[]{"WATER"}),
	BLOCK_WEEPING_VINES_BREAK(new String[0]),
	BLOCK_WEEPING_VINES_FALL(new String[0]),
	BLOCK_WEEPING_VINES_HIT(new String[0]),
	BLOCK_WEEPING_VINES_PLACE(new String[0]),
	BLOCK_WEEPING_VINES_STEP(new String[0]),
	BLOCK_WET_GRASS_BREAK(new String[0]),
	BLOCK_WET_GRASS_FALL(new String[0]),
	BLOCK_WET_GRASS_HIT(new String[0]),
	BLOCK_WET_GRASS_PLACE(new String[]{"BLOCK_WET_GRASS_HIT"}),
	BLOCK_WET_GRASS_STEP(new String[]{"BLOCK_WET_GRASS_HIT"}),
	BLOCK_WET_SPONGE_BREAK(new String[0]),
	BLOCK_WET_SPONGE_FALL(new String[0]),
	BLOCK_WET_SPONGE_HIT(new String[0]),
	BLOCK_WET_SPONGE_PLACE(new String[0]),
	BLOCK_WET_SPONGE_STEP(new String[0]),
	BLOCK_WOODEN_BUTTON_CLICK_OFF(new String[]{"WOOD_CLICK", "BLOCK_WOOD_BUTTON_CLICK_OFF"}),
	BLOCK_WOODEN_BUTTON_CLICK_ON(new String[]{"WOOD_CLICK", "BLOCK_WOOD_BUTTON_CLICK_ON"}),
	BLOCK_WOODEN_DOOR_CLOSE(new String[]{"DOOR_CLOSE"}),
	BLOCK_WOODEN_DOOR_OPEN(new String[]{"DOOR_OPEN"}),
	BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF(new String[]{"BLOCK_WOOD_PRESSUREPLATE_CLICK_OFF"}),
	BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON(new String[]{"BLOCK_WOOD_PRESSUREPLATE_CLICK_ON"}),
	BLOCK_WOODEN_TRAPDOOR_CLOSE(new String[0]),
	BLOCK_WOODEN_TRAPDOOR_OPEN(new String[0]),
	BLOCK_WOOD_BREAK(new String[]{"DIG_WOOD"}),
	BLOCK_WOOD_FALL(new String[0]),
	BLOCK_WOOD_HIT(new String[0]),
	BLOCK_WOOD_PLACE(new String[0]),
	BLOCK_WOOD_STEP(new String[]{"STEP_WOOD"}),
	BLOCK_WOOL_BREAK(new String[]{"DIG_WOOL", "BLOCK_CLOTH_BREAK"}),
	BLOCK_WOOL_FALL(new String[0]),
	BLOCK_WOOL_HIT(new String[]{"BLOCK_WOOL_FALL"}),
	BLOCK_WOOL_PLACE(new String[]{"BLOCK_WOOL_FALL"}),
	BLOCK_WOOL_STEP(new String[]{"STEP_WOOL", "BLOCK_CLOTH_STEP"}),
	ENCHANT_THORNS_HIT(new String[0]),
	ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM(new String[0]),
	ENTITY_ALLAY_AMBIENT_WITH_ITEM(new String[0]),
	ENTITY_ALLAY_DEATH(new String[0]),
	ENTITY_ALLAY_HURT(new String[0]),
	ENTITY_ALLAY_ITEM_GIVEN(new String[0]),
	ENTITY_ALLAY_ITEM_TAKEN(new String[0]),
	ENTITY_ALLAY_ITEM_THROWN(new String[0]),
	ENTITY_ARMOR_STAND_BREAK(new String[]{"ENTITY_ARMORSTAND_BREAK"}),
	ENTITY_ARMOR_STAND_FALL(new String[]{"ENTITY_ARMORSTAND_FALL"}),
	ENTITY_ARMOR_STAND_HIT(new String[]{"ENTITY_ARMORSTAND_HIT"}),
	ENTITY_ARMOR_STAND_PLACE(new String[]{"ENTITY_ARMORSTAND_PLACE"}),
	ENTITY_ARROW_HIT(new String[]{"ARROW_HIT"}),
	ENTITY_ARROW_HIT_PLAYER(new String[]{"SUCCESSFUL_HIT"}),
	ENTITY_ARROW_SHOOT(new String[]{"SHOOT_ARROW"}),
	ENTITY_AXOLOTL_ATTACK(new String[0]),
	ENTITY_AXOLOTL_DEATH(new String[0]),
	ENTITY_AXOLOTL_HURT(new String[0]),
	ENTITY_AXOLOTL_IDLE_AIR(new String[0]),
	ENTITY_AXOLOTL_IDLE_WATER(new String[0]),
	ENTITY_AXOLOTL_SPLASH(new String[0]),
	ENTITY_AXOLOTL_SWIM(new String[0]),
	ENTITY_BAT_AMBIENT(new String[]{"BAT_IDLE"}),
	ENTITY_BAT_DEATH(new String[]{"BAT_DEATH"}),
	ENTITY_BAT_HURT(new String[]{"BAT_HURT"}),
	ENTITY_BAT_LOOP(new String[]{"BAT_LOOP"}),
	ENTITY_BAT_TAKEOFF(new String[]{"BAT_TAKEOFF"}),
	ENTITY_BEE_DEATH(new String[0]),
	ENTITY_BEE_HURT(new String[0]),
	ENTITY_BEE_LOOP(new String[0]),
	ENTITY_BEE_LOOP_AGGRESSIVE(new String[0]),
	ENTITY_BEE_POLLINATE(new String[0]),
	ENTITY_BEE_STING(new String[0]),
	ENTITY_BLAZE_AMBIENT(new String[]{"BLAZE_BREATH"}),
	ENTITY_BLAZE_BURN(new String[0]),
	ENTITY_BLAZE_DEATH(new String[]{"BLAZE_DEATH"}),
	ENTITY_BLAZE_HURT(new String[]{"BLAZE_HIT"}),
	ENTITY_BLAZE_SHOOT(new String[0]),
	ENTITY_BOAT_PADDLE_LAND(new String[0]),
	ENTITY_BOAT_PADDLE_WATER(new String[0]),
	ENTITY_BREEZE_DEATH(new String[0]),
	ENTITY_BREEZE_HURT(new String[0]),
	ENTITY_BREEZE_IDLE_AIR(new String[0]),
	ENTITY_BREEZE_IDLE_GROUND(new String[0]),
	ENTITY_BREEZE_INHALE(new String[0]),
	ENTITY_BREEZE_JUMP(new String[0]),
	ENTITY_BREEZE_LAND(new String[0]),
	ENTITY_BREEZE_SHOOT(new String[0]),
	ENTITY_BREEZE_SLIDE(new String[0]),
	ENTITY_CAMEL_AMBIENT(new String[0]),
	ENTITY_CAMEL_DASH(new String[0]),
	ENTITY_CAMEL_DASH_READY(new String[0]),
	ENTITY_CAMEL_DEATH(new String[0]),
	ENTITY_CAMEL_EAT(new String[0]),
	ENTITY_CAMEL_HURT(new String[0]),
	ENTITY_CAMEL_SADDLE(new String[0]),
	ENTITY_CAMEL_SIT(new String[0]),
	ENTITY_CAMEL_STAND(new String[0]),
	ENTITY_CAMEL_STEP(new String[0]),
	ENTITY_CAMEL_STEP_SAND(new String[0]),
	ENTITY_CAT_AMBIENT(new String[]{"CAT_MEOW"}),
	ENTITY_CAT_BEG_FOR_FOOD(new String[0]),
	ENTITY_CAT_DEATH(new String[0]),
	ENTITY_CAT_EAT(new String[0]),
	ENTITY_CAT_HISS(new String[]{"CAT_HISS"}),
	ENTITY_CAT_HURT(new String[]{"CAT_HIT"}),
	ENTITY_CAT_PURR(new String[]{"CAT_PURR"}),
	ENTITY_CAT_PURREOW(new String[]{"CAT_PURREOW"}),
	ENTITY_CAT_STRAY_AMBIENT(new String[0]),
	ENTITY_CHICKEN_AMBIENT(new String[]{"CHICKEN_IDLE"}),
	ENTITY_CHICKEN_DEATH(new String[0]),
	ENTITY_CHICKEN_EGG(new String[]{"CHICKEN_EGG_POP"}),
	ENTITY_CHICKEN_HURT(new String[]{"CHICKEN_HURT"}),
	ENTITY_CHICKEN_STEP(new String[]{"CHICKEN_WALK"}),
	ENTITY_COD_AMBIENT(new String[0]),
	ENTITY_COD_DEATH(new String[0]),
	ENTITY_COD_FLOP(new String[0]),
	ENTITY_COD_HURT(new String[0]),
	ENTITY_COW_AMBIENT(new String[]{"COW_IDLE"}),
	ENTITY_COW_DEATH(new String[0]),
	ENTITY_COW_HURT(new String[]{"COW_HURT"}),
	ENTITY_COW_MILK(new String[0]),
	ENTITY_COW_STEP(new String[]{"COW_WALK"}),
	ENTITY_CREEPER_DEATH(new String[]{"CREEPER_DEATH"}),
	ENTITY_CREEPER_HURT(new String[0]),
	ENTITY_CREEPER_PRIMED(new String[]{"CREEPER_HISS"}),
	ENTITY_DOLPHIN_AMBIENT(new String[0]),
	ENTITY_DOLPHIN_AMBIENT_WATER(new String[0]),
	ENTITY_DOLPHIN_ATTACK(new String[0]),
	ENTITY_DOLPHIN_DEATH(new String[0]),
	ENTITY_DOLPHIN_EAT(new String[0]),
	ENTITY_DOLPHIN_HURT(new String[0]),
	ENTITY_DOLPHIN_JUMP(new String[0]),
	ENTITY_DOLPHIN_PLAY(new String[0]),
	ENTITY_DOLPHIN_SPLASH(new String[0]),
	ENTITY_DOLPHIN_SWIM(new String[0]),
	ENTITY_DONKEY_AMBIENT(new String[]{"DONKEY_IDLE"}),
	ENTITY_DONKEY_ANGRY(new String[]{"DONKEY_ANGRY"}),
	ENTITY_DONKEY_CHEST(new String[0]),
	ENTITY_DONKEY_DEATH(new String[]{"DONKEY_DEATH"}),
	ENTITY_DONKEY_EAT(new String[0]),
	ENTITY_DONKEY_HURT(new String[]{"DONKEY_HIT"}),
	ENTITY_DRAGON_FIREBALL_EXPLODE(new String[]{"ENTITY_ENDERDRAGON_FIREBALL_EXPLODE"}),
	ENTITY_DROWNED_AMBIENT(new String[0]),
	ENTITY_DROWNED_AMBIENT_WATER(new String[0]),
	ENTITY_DROWNED_DEATH(new String[0]),
	ENTITY_DROWNED_DEATH_WATER(new String[0]),
	ENTITY_DROWNED_HURT(new String[0]),
	ENTITY_DROWNED_HURT_WATER(new String[0]),
	ENTITY_DROWNED_SHOOT(new String[0]),
	ENTITY_DROWNED_STEP(new String[0]),
	ENTITY_DROWNED_SWIM(new String[0]),
	ENTITY_EGG_THROW(new String[0]),
	ENTITY_ELDER_GUARDIAN_AMBIENT(new String[0]),
	ENTITY_ELDER_GUARDIAN_AMBIENT_LAND(new String[0]),
	ENTITY_ELDER_GUARDIAN_CURSE(new String[0]),
	ENTITY_ELDER_GUARDIAN_DEATH(new String[0]),
	ENTITY_ELDER_GUARDIAN_DEATH_LAND(new String[0]),
	ENTITY_ELDER_GUARDIAN_FLOP(new String[0]),
	ENTITY_ELDER_GUARDIAN_HURT(new String[0]),
	ENTITY_ELDER_GUARDIAN_HURT_LAND(new String[0]),
	ENTITY_ENDERMAN_AMBIENT(new String[]{"ENDERMAN_IDLE", "ENTITY_ENDERMEN_AMBIENT"}),
	ENTITY_ENDERMAN_DEATH(new String[]{"ENDERMAN_DEATH", "ENTITY_ENDERMEN_DEATH"}),
	ENTITY_ENDERMAN_HURT(new String[]{"ENDERMAN_HIT", "ENTITY_ENDERMEN_HURT"}),
	ENTITY_ENDERMAN_SCREAM(new String[]{"ENDERMAN_SCREAM", "ENTITY_ENDERMEN_SCREAM"}),
	ENTITY_ENDERMAN_STARE(new String[]{"ENDERMAN_STARE", "ENTITY_ENDERMEN_STARE"}),
	ENTITY_ENDERMAN_TELEPORT(new String[]{"ENDERMAN_TELEPORT", "ENTITY_ENDERMEN_TELEPORT"}),
	ENTITY_ENDERMITE_AMBIENT(new String[0]),
	ENTITY_ENDERMITE_DEATH(new String[0]),
	ENTITY_ENDERMITE_HURT(new String[0]),
	ENTITY_ENDERMITE_STEP(new String[0]),
	ENTITY_ENDER_DRAGON_AMBIENT(new String[]{"ENDERDRAGON_WINGS", "ENTITY_ENDERDRAGON_AMBIENT"}),
	ENTITY_ENDER_DRAGON_DEATH(new String[]{"ENDERDRAGON_DEATH", "ENTITY_ENDERDRAGON_DEATH"}),
	ENTITY_ENDER_DRAGON_FLAP(new String[]{"ENDERDRAGON_WINGS", "ENTITY_ENDERDRAGON_FLAP"}),
	ENTITY_ENDER_DRAGON_GROWL(new String[]{"ENDERDRAGON_GROWL", "ENTITY_ENDERDRAGON_GROWL"}),
	ENTITY_ENDER_DRAGON_HURT(new String[]{"ENDERDRAGON_HIT", "ENTITY_ENDERDRAGON_HURT"}),
	ENTITY_ENDER_DRAGON_SHOOT(new String[]{"ENTITY_ENDERDRAGON_SHOOT"}),
	ENTITY_ENDER_EYE_DEATH(new String[0]),
	ENTITY_ENDER_EYE_LAUNCH(new String[]{"ENTITY_ENDER_EYE_DEATH", "ENTITY_ENDEREYE_DEATH"}),
	ENTITY_ENDER_PEARL_THROW(new String[]{"ENTITY_ENDERPEARL_THROW"}),
	ENTITY_EVOKER_AMBIENT(new String[]{"ENTITY_EVOCATION_ILLAGER_AMBIENT"}),
	ENTITY_EVOKER_CAST_SPELL(new String[]{"ENTITY_EVOCATION_ILLAGER_CAST_SPELL"}),
	ENTITY_EVOKER_CELEBRATE(new String[0]),
	ENTITY_EVOKER_DEATH(new String[]{"ENTITY_EVOCATION_ILLAGER_DEATH"}),
	ENTITY_EVOKER_FANGS_ATTACK(new String[]{"ENTITY_EVOCATION_FANGS_ATTACK"}),
	ENTITY_EVOKER_HURT(new String[]{"ENTITY_EVOCATION_ILLAGER_HURT"}),
	ENTITY_EVOKER_PREPARE_ATTACK(new String[]{"ENTITY_EVOCATION_ILLAGER_PREPARE_ATTACK"}),
	ENTITY_EVOKER_PREPARE_SUMMON(new String[]{"ENTITY_EVOCATION_ILLAGER_PREPARE_SUMMON"}),
	ENTITY_EVOKER_PREPARE_WOLOLO(new String[]{"ENTITY_EVOCATION_ILLAGER_PREPARE_WOLOLO"}),
	ENTITY_EXPERIENCE_BOTTLE_THROW(new String[0]),
	ENTITY_EXPERIENCE_ORB_PICKUP(new String[]{"ORB_PICKUP"}),
	ENTITY_FIREWORK_ROCKET_BLAST(new String[]{"FIREWORK_BLAST", "ENTITY_FIREWORK_BLAST"}),
	ENTITY_FIREWORK_ROCKET_BLAST_FAR(new String[]{"FIREWORK_BLAST2", "ENTITY_FIREWORK_BLAST_FAR"}),
	ENTITY_FIREWORK_ROCKET_LARGE_BLAST(new String[]{"FIREWORK_LARGE_BLAST", "ENTITY_FIREWORK_LARGE_BLAST"}),
	ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR(new String[]{"FIREWORK_LARGE_BLAST2", "ENTITY_FIREWORK_LARGE_BLAST_FAR"}),
	ENTITY_FIREWORK_ROCKET_LAUNCH(new String[]{"FIREWORK_LAUNCH", "ENTITY_FIREWORK_LAUNCH"}),
	ENTITY_FIREWORK_ROCKET_SHOOT(new String[0]),
	ENTITY_FIREWORK_ROCKET_TWINKLE(new String[]{"FIREWORK_TWINKLE", "ENTITY_FIREWORK_TWINKLE"}),
	ENTITY_FIREWORK_ROCKET_TWINKLE_FAR(new String[]{"FIREWORK_TWINKLE2", "ENTITY_FIREWORK_TWINKLE_FAR"}),
	ENTITY_FISHING_BOBBER_RETRIEVE(new String[0]),
	ENTITY_FISHING_BOBBER_SPLASH(new String[]{"SPLASH2", "ENTITY_BOBBER_SPLASH"}),
	ENTITY_FISHING_BOBBER_THROW(new String[]{"ENTITY_BOBBER_THROW"}),
	ENTITY_FISH_SWIM(new String[0]),
	ENTITY_FOX_AGGRO(new String[0]),
	ENTITY_FOX_AMBIENT(new String[0]),
	ENTITY_FOX_BITE(new String[0]),
	ENTITY_FOX_DEATH(new String[0]),
	ENTITY_FOX_EAT(new String[0]),
	ENTITY_FOX_HURT(new String[0]),
	ENTITY_FOX_SCREECH(new String[0]),
	ENTITY_FOX_SLEEP(new String[0]),
	ENTITY_FOX_SNIFF(new String[0]),
	ENTITY_FOX_SPIT(new String[0]),
	ENTITY_FOX_TELEPORT(new String[0]),
	ENTITY_FROG_AMBIENT(new String[0]),
	ENTITY_FROG_DEATH(new String[0]),
	ENTITY_FROG_EAT(new String[0]),
	ENTITY_FROG_HURT(new String[0]),
	ENTITY_FROG_LAY_SPAWN(new String[0]),
	ENTITY_FROG_LONG_JUMP(new String[0]),
	ENTITY_FROG_STEP(new String[0]),
	ENTITY_FROG_TONGUE(new String[0]),
	ENTITY_GENERIC_BIG_FALL(new String[]{"FALL_BIG"}),
	ENTITY_GENERIC_BURN(new String[0]),
	ENTITY_GENERIC_DEATH(new String[0]),
	ENTITY_GENERIC_DRINK(new String[]{"DRINK"}),
	ENTITY_GENERIC_EAT(new String[]{"EAT"}),
	ENTITY_GENERIC_EXPLODE(new String[]{"EXPLODE"}),
	ENTITY_GENERIC_EXTINGUISH_FIRE(new String[0]),
	ENTITY_GENERIC_HURT(new String[0]),
	ENTITY_GENERIC_SMALL_FALL(new String[]{"FALL_SMALL"}),
	ENTITY_GENERIC_SPLASH(new String[]{"SPLASH"}),
	ENTITY_GENERIC_SWIM(new String[]{"SWIM"}),
	BLOCK_COBWEB_BREAK(new String[0]),
	BLOCK_COBWEB_FALL(new String[0]),
	BLOCK_COBWEB_HIT(new String[0]),
	BLOCK_COBWEB_PLACE(new String[0]),
	BLOCK_COBWEB_STEP(new String[0]),
	BLOCK_HEAVY_CORE_BREAK(new String[0]),
	BLOCK_HEAVY_CORE_FALL(new String[0]),
	BLOCK_HEAVY_CORE_HIT(new String[0]),
	BLOCK_HEAVY_CORE_PLACE(new String[0]),
	BLOCK_HEAVY_CORE_STEP(new String[0]),
	BLOCK_TRIAL_SPAWNER_ABOUT_TO_SPAWN_ITEM(new String[0]),
	BLOCK_TRIAL_SPAWNER_AMBIENT_CHARGED(new String[0]),
	BLOCK_TRIAL_SPAWNER_CHARGE_ACTIVATE(new String[0]),
	BLOCK_TRIAL_SPAWNER_SPAWN_ITEM(new String[0]),
	BLOCK_TRIAL_SPAWNER_SPAWN_ITEM_BEGIN(new String[0]),
	BLOCK_VAULT_ACTIVATE(new String[0]),
	BLOCK_VAULT_AMBIENT(new String[0]),
	BLOCK_VAULT_BREAK(new String[0]),
	BLOCK_VAULT_CLOSE_SHUTTER(new String[0]),
	BLOCK_VAULT_DEACTIVATE(new String[0]),
	BLOCK_VAULT_EJECT_ITEM(new String[0]),
	BLOCK_VAULT_FALL(new String[0]),
	BLOCK_VAULT_HIT(new String[0]),
	BLOCK_VAULT_INSERT_ITEM(new String[0]),
	BLOCK_VAULT_INSERT_ITEM_FAIL(new String[0]),
	BLOCK_VAULT_OPEN_SHUTTER(new String[0]),
	BLOCK_VAULT_PLACE(new String[0]),
	BLOCK_VAULT_STEP(new String[0]),
	BLOCK_WET_SPONGE_DRIES(new String[0]),
	ENTITY_ARMADILLO_AMBIENT(new String[0]),
	ENTITY_ARMADILLO_BRUSH(new String[0]),
	ENTITY_ARMADILLO_DEATH(new String[0]),
	ENTITY_ARMADILLO_EAT(new String[0]),
	ENTITY_ARMADILLO_HURT(new String[0]),
	ENTITY_ARMADILLO_HURT_REDUCED(new String[0]),
	ENTITY_ARMADILLO_LAND(new String[0]),
	ENTITY_ARMADILLO_PEEK(new String[0]),
	ENTITY_ARMADILLO_ROLL(new String[0]),
	ENTITY_ARMADILLO_SCUTE_DROP(new String[0]),
	ENTITY_ARMADILLO_STEP(new String[0]),
	ENTITY_ARMADILLO_UNROLL_FINISH(new String[0]),
	ENTITY_ARMADILLO_UNROLL_START(new String[0]),
	ENTITY_BOGGED_AMBIENT(new String[0]),
	ENTITY_BOGGED_DEATH(new String[0]),
	ENTITY_BOGGED_HURT(new String[0]),
	ENTITY_BOGGED_SHEAR(new String[0]),
	ENTITY_BOGGED_STEP(new String[0]),
	ENTITY_BREEZE_CHARGE(new String[0]),
	ENTITY_BREEZE_DEFLECT(new String[0]),
	ENTITY_BREEZE_WHIRL(new String[0]),
	ENTITY_BREEZE_WIND_BURST(new String[0]),
	ENTITY_DONKEY_JUMP(new String[0]),
	ENTITY_MULE_JUMP(new String[0]),
	ENTITY_PARROT_IMITATE_BOGGED(new String[0]),
	ENTITY_WIND_CHARGE_THROW(new String[0]),
	ENTITY_WIND_CHARGE_WIND_BURST(new String[]{"ENTITY_GENERIC_WIND_BURST"}),
	EVENT_MOB_EFFECT_BAD_OMEN(new String[0]),
	EVENT_MOB_EFFECT_RAID_OMEN(new String[0]),
	EVENT_MOB_EFFECT_TRIAL_OMEN(new String[0]),
	ITEM_ARMOR_EQUIP_WOLF(new String[0]),
	ITEM_ARMOR_UNEQUIP_WOLF(new String[0]),
	ITEM_MACE_SMASH_AIR(new String[0]),
	ITEM_MACE_SMASH_GROUND(new String[0]),
	ITEM_MACE_SMASH_GROUND_HEAVY(new String[0]),
	ITEM_OMINOUS_BOTTLE_DISPOSE(new String[0]),
	ITEM_WOLF_ARMOR_BREAK(new String[0]),
	ITEM_WOLF_ARMOR_CRACK(new String[0]),
	ITEM_WOLF_ARMOR_DAMAGE(new String[0]),
	ITEM_WOLF_ARMOR_REPAIR(new String[0]),
	ENTITY_GHAST_AMBIENT(new String[]{"GHAST_MOAN"}),
	ENTITY_GHAST_DEATH(new String[]{"GHAST_DEATH"}),
	ENTITY_GHAST_HURT(new String[]{"GHAST_SCREAM2"}),
	ENTITY_GHAST_SCREAM(new String[]{"GHAST_SCREAM"}),
	ENTITY_GHAST_SHOOT(new String[]{"GHAST_FIREBALL"}),
	ENTITY_GHAST_WARN(new String[]{"GHAST_CHARGE"}),
	ENTITY_GLOW_ITEM_FRAME_ADD_ITEM(new String[0]),
	ENTITY_GLOW_ITEM_FRAME_BREAK(new String[0]),
	ENTITY_GLOW_ITEM_FRAME_PLACE(new String[0]),
	ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM(new String[0]),
	ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM(new String[0]),
	ENTITY_GLOW_SQUID_AMBIENT(new String[0]),
	ENTITY_GLOW_SQUID_DEATH(new String[0]),
	ENTITY_GLOW_SQUID_HURT(new String[0]),
	ENTITY_GLOW_SQUID_SQUIRT(new String[0]),
	ENTITY_GOAT_AMBIENT(new String[0]),
	ENTITY_GOAT_DEATH(new String[0]),
	ENTITY_GOAT_EAT(new String[0]),
	ENTITY_GOAT_HORN_BREAK(new String[0]),
	ENTITY_GOAT_HURT(new String[0]),
	ENTITY_GOAT_LONG_JUMP(new String[0]),
	ENTITY_GOAT_MILK(new String[0]),
	ENTITY_GOAT_PREPARE_RAM(new String[0]),
	ENTITY_GOAT_RAM_IMPACT(new String[0]),
	ENTITY_GOAT_SCREAMING_AMBIENT(new String[0]),
	ENTITY_GOAT_SCREAMING_DEATH(new String[0]),
	ENTITY_GOAT_SCREAMING_EAT(new String[0]),
	ENTITY_GOAT_SCREAMING_HORN_BREAK(new String[0]),
	ENTITY_GOAT_SCREAMING_HURT(new String[0]),
	ENTITY_GOAT_SCREAMING_LONG_JUMP(new String[0]),
	ENTITY_GOAT_SCREAMING_MILK(new String[0]),
	ENTITY_GOAT_SCREAMING_PREPARE_RAM(new String[0]),
	ENTITY_GOAT_SCREAMING_RAM_IMPACT(new String[0]),
	ENTITY_GOAT_STEP(new String[0]),
	ENTITY_GUARDIAN_AMBIENT(new String[0]),
	ENTITY_GUARDIAN_AMBIENT_LAND(new String[0]),
	ENTITY_GUARDIAN_ATTACK(new String[0]),
	ENTITY_GUARDIAN_DEATH(new String[0]),
	ENTITY_GUARDIAN_DEATH_LAND(new String[0]),
	ENTITY_GUARDIAN_FLOP(new String[0]),
	ENTITY_GUARDIAN_HURT(new String[0]),
	ENTITY_GUARDIAN_HURT_LAND(new String[0]),
	ENTITY_HOGLIN_AMBIENT(new String[0]),
	ENTITY_HOGLIN_ANGRY(new String[0]),
	ENTITY_HOGLIN_ATTACK(new String[0]),
	ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED(new String[0]),
	ENTITY_HOGLIN_DEATH(new String[0]),
	ENTITY_HOGLIN_HURT(new String[0]),
	ENTITY_HOGLIN_RETREAT(new String[0]),
	ENTITY_HOGLIN_STEP(new String[0]),
	ENTITY_HORSE_AMBIENT(new String[]{"HORSE_IDLE"}),
	ENTITY_HORSE_ANGRY(new String[]{"HORSE_ANGRY"}),
	ENTITY_HORSE_ARMOR(new String[]{"HORSE_ARMOR"}),
	ENTITY_HORSE_BREATHE(new String[]{"HORSE_BREATHE"}),
	ENTITY_HORSE_DEATH(new String[]{"HORSE_DEATH"}),
	ENTITY_HORSE_EAT(new String[0]),
	ENTITY_HORSE_GALLOP(new String[]{"HORSE_GALLOP"}),
	ENTITY_HORSE_HURT(new String[]{"HORSE_HIT"}),
	ENTITY_HORSE_JUMP(new String[]{"HORSE_JUMP"}),
	ENTITY_HORSE_LAND(new String[]{"HORSE_LAND"}),
	ENTITY_HORSE_SADDLE(new String[]{"HORSE_SADDLE"}),
	ENTITY_HORSE_STEP(new String[]{"HORSE_SOFT"}),
	ENTITY_HORSE_STEP_WOOD(new String[]{"HORSE_WOOD"}),
	ENTITY_HOSTILE_BIG_FALL(new String[]{"FALL_BIG"}),
	ENTITY_HOSTILE_DEATH(new String[0]),
	ENTITY_HOSTILE_HURT(new String[0]),
	ENTITY_HOSTILE_SMALL_FALL(new String[]{"FALL_SMALL"}),
	ENTITY_HOSTILE_SPLASH(new String[]{"SPLASH"}),
	ENTITY_HOSTILE_SWIM(new String[]{"SWIM"}),
	ENTITY_HUSK_AMBIENT(new String[0]),
	ENTITY_HUSK_CONVERTED_TO_ZOMBIE(new String[0]),
	ENTITY_HUSK_DEATH(new String[0]),
	ENTITY_HUSK_HURT(new String[0]),
	ENTITY_HUSK_STEP(new String[0]),
	ENTITY_ILLUSIONER_AMBIENT(new String[]{"ENTITY_ILLUSION_ILLAGER_AMBIENT"}),
	ENTITY_ILLUSIONER_CAST_SPELL(new String[]{"ENTITY_ILLUSION_ILLAGER_CAST_SPELL"}),
	ENTITY_ILLUSIONER_DEATH(new String[]{"ENTITY_ILLUSIONER_CAST_DEATH", "ENTITY_ILLUSION_ILLAGER_DEATH"}),
	ENTITY_ILLUSIONER_HURT(new String[]{"ENTITY_ILLUSION_ILLAGER_HURT"}),
	ENTITY_ILLUSIONER_MIRROR_MOVE(new String[]{"ENTITY_ILLUSION_ILLAGER_MIRROR_MOVE"}),
	ENTITY_ILLUSIONER_PREPARE_BLINDNESS(new String[]{"ENTITY_ILLUSION_ILLAGER_PREPARE_BLINDNESS"}),
	ENTITY_ILLUSIONER_PREPARE_MIRROR(new String[]{"ENTITY_ILLUSION_ILLAGER_PREPARE_MIRROR"}),
	ENTITY_IRON_GOLEM_ATTACK(new String[]{"IRONGOLEM_THROW", "ENTITY_IRONGOLEM_ATTACK"}),
	ENTITY_IRON_GOLEM_DAMAGE(new String[0]),
	ENTITY_IRON_GOLEM_DEATH(new String[]{"IRONGOLEM_DEATH", "ENTITY_IRONGOLEM_DEATH"}),
	ENTITY_IRON_GOLEM_HURT(new String[]{"IRONGOLEM_HIT", "ENTITY_IRONGOLEM_HURT"}),
	ENTITY_IRON_GOLEM_REPAIR(new String[0]),
	ENTITY_IRON_GOLEM_STEP(new String[]{"IRONGOLEM_WALK", "ENTITY_IRONGOLEM_STEP"}),
	ENTITY_ITEM_BREAK(new String[]{"ITEM_BREAK"}),
	ENTITY_ITEM_FRAME_ADD_ITEM(new String[]{"ENTITY_ITEMFRAME_ADD_ITEM"}),
	ENTITY_ITEM_FRAME_BREAK(new String[]{"ENTITY_ITEMFRAME_BREAK"}),
	ENTITY_ITEM_FRAME_PLACE(new String[]{"ENTITY_ITEMFRAME_PLACE"}),
	ENTITY_ITEM_FRAME_REMOVE_ITEM(new String[]{"ENTITY_ITEMFRAME_REMOVE_ITEM"}),
	ENTITY_ITEM_FRAME_ROTATE_ITEM(new String[]{"ENTITY_ITEMFRAME_ROTATE_ITEM"}),
	ENTITY_ITEM_PICKUP(new String[]{"ITEM_PICKUP"}),
	ENTITY_LEASH_KNOT_BREAK(new String[]{"ENTITY_LEASHKNOT_BREAK"}),
	ENTITY_LEASH_KNOT_PLACE(new String[]{"ENTITY_LEASHKNOT_PLACE"}),
	ENTITY_LIGHTNING_BOLT_IMPACT(new String[]{"ENTITY_LIGHTNING_IMPACT", "AMBIENCE_THUNDER"}),
	ENTITY_LIGHTNING_BOLT_THUNDER(new String[]{"ENTITY_LIGHTNING_THUNDER", "AMBIENCE_THUNDER"}),
	ENTITY_LINGERING_POTION_THROW(new String[0]),
	ENTITY_LLAMA_AMBIENT(new String[0]),
	ENTITY_LLAMA_ANGRY(new String[0]),
	ENTITY_LLAMA_CHEST(new String[0]),
	ENTITY_LLAMA_DEATH(new String[0]),
	ENTITY_LLAMA_EAT(new String[0]),
	ENTITY_LLAMA_HURT(new String[0]),
	ENTITY_LLAMA_SPIT(new String[0]),
	ENTITY_LLAMA_STEP(new String[0]),
	ENTITY_LLAMA_SWAG(new String[0]),
	ENTITY_MAGMA_CUBE_DEATH(new String[]{"ENTITY_MAGMACUBE_DEATH"}),
	ENTITY_MAGMA_CUBE_DEATH_SMALL(new String[]{"ENTITY_SMALL_MAGMACUBE_DEATH"}),
	ENTITY_MAGMA_CUBE_HURT(new String[]{"ENTITY_MAGMACUBE_HURT"}),
	ENTITY_MAGMA_CUBE_HURT_SMALL(new String[]{"ENTITY_SMALL_MAGMACUBE_HURT"}),
	ENTITY_MAGMA_CUBE_JUMP(new String[]{"MAGMACUBE_JUMP", "ENTITY_MAGMACUBE_JUMP"}),
	ENTITY_MAGMA_CUBE_SQUISH(new String[]{"MAGMACUBE_WALK", "ENTITY_MAGMACUBE_SQUISH"}),
	ENTITY_MAGMA_CUBE_SQUISH_SMALL(new String[]{"MAGMACUBE_WALK2", "ENTITY_SMALL_MAGMACUBE_SQUISH"}),
	ENTITY_MINECART_INSIDE(new String[]{"MINECART_INSIDE"}),
	ENTITY_MINECART_INSIDE_UNDERWATER(new String[0]),
	ENTITY_MINECART_RIDING(new String[]{"MINECART_BASE"}),
	ENTITY_MOOSHROOM_CONVERT(new String[0]),
	ENTITY_MOOSHROOM_EAT(new String[0]),
	ENTITY_MOOSHROOM_MILK(new String[0]),
	ENTITY_MOOSHROOM_SHEAR(new String[0]),
	ENTITY_MOOSHROOM_SUSPICIOUS_MILK(new String[0]),
	ENTITY_MULE_AMBIENT(new String[0]),
	ENTITY_MULE_ANGRY(new String[0]),
	ENTITY_MULE_CHEST(new String[]{"ENTITY_MULE_AMBIENT"}),
	ENTITY_MULE_DEATH(new String[]{"ENTITY_MULE_AMBIENT"}),
	ENTITY_MULE_EAT(new String[0]),
	ENTITY_MULE_HURT(new String[]{"ENTITY_MULE_AMBIENT"}),
	ENTITY_OCELOT_AMBIENT(new String[0]),
	ENTITY_OCELOT_DEATH(new String[0]),
	ENTITY_OCELOT_HURT(new String[0]),
	ENTITY_PAINTING_BREAK(new String[0]),
	ENTITY_PAINTING_PLACE(new String[0]),
	ENTITY_PANDA_AGGRESSIVE_AMBIENT(new String[0]),
	ENTITY_PANDA_AMBIENT(new String[0]),
	ENTITY_PANDA_BITE(new String[0]),
	ENTITY_PANDA_CANT_BREED(new String[0]),
	ENTITY_PANDA_DEATH(new String[0]),
	ENTITY_PANDA_EAT(new String[0]),
	ENTITY_PANDA_HURT(new String[0]),
	ENTITY_PANDA_PRE_SNEEZE(new String[0]),
	ENTITY_PANDA_SNEEZE(new String[0]),
	ENTITY_PANDA_STEP(new String[0]),
	ENTITY_PANDA_WORRIED_AMBIENT(new String[0]),
	ENTITY_PARROT_AMBIENT(new String[0]),
	ENTITY_PARROT_DEATH(new String[0]),
	ENTITY_PARROT_EAT(new String[0]),
	ENTITY_PARROT_FLY(new String[0]),
	ENTITY_PARROT_HURT(new String[0]),
	ENTITY_PARROT_IMITATE_BLAZE(new String[0]),
	ENTITY_PARROT_IMITATE_BREEZE(new String[0]),
	ENTITY_PARROT_IMITATE_CREEPER(new String[0]),
	ENTITY_PARROT_IMITATE_DROWNED(new String[0]),
	ENTITY_PARROT_IMITATE_ELDER_GUARDIAN(new String[0]),
	ENTITY_PARROT_IMITATE_ENDERMAN(new String[0]),
	ENTITY_PARROT_IMITATE_ENDERMITE(new String[0]),
	ENTITY_PARROT_IMITATE_ENDER_DRAGON(new String[0]),
	ENTITY_PARROT_IMITATE_EVOKER(new String[0]),
	ENTITY_PARROT_IMITATE_GHAST(new String[0]),
	ENTITY_PARROT_IMITATE_GUARDIAN(new String[0]),
	ENTITY_PARROT_IMITATE_HOGLIN(new String[0]),
	ENTITY_PARROT_IMITATE_HUSK(new String[0]),
	ENTITY_PARROT_IMITATE_ILLUSIONER(new String[0]),
	ENTITY_PARROT_IMITATE_MAGMA_CUBE(new String[0]),
	ENTITY_PARROT_IMITATE_PHANTOM(new String[0]),
	ENTITY_PARROT_IMITATE_PIGLIN(new String[0]),
	ENTITY_PARROT_IMITATE_PIGLIN_BRUTE(new String[0]),
	ENTITY_PARROT_IMITATE_PILLAGER(new String[0]),
	ENTITY_PARROT_IMITATE_POLAR_BEAR(new String[0]),
	ENTITY_PARROT_IMITATE_RAVAGER(new String[0]),
	ENTITY_PARROT_IMITATE_SHULKER(new String[0]),
	ENTITY_PARROT_IMITATE_SILVERFISH(new String[0]),
	ENTITY_PARROT_IMITATE_SKELETON(new String[0]),
	ENTITY_PARROT_IMITATE_SLIME(new String[0]),
	ENTITY_PARROT_IMITATE_SPIDER(new String[0]),
	ENTITY_PARROT_IMITATE_STRAY(new String[0]),
	ENTITY_PARROT_IMITATE_VEX(new String[0]),
	ENTITY_PARROT_IMITATE_VINDICATOR(new String[0]),
	ENTITY_PARROT_IMITATE_WARDEN(new String[0]),
	ENTITY_PARROT_IMITATE_WITCH(new String[0]),
	ENTITY_PARROT_IMITATE_WITHER(new String[0]),
	ENTITY_PARROT_IMITATE_WITHER_SKELETON(new String[0]),
	ENTITY_PARROT_IMITATE_WOLF(new String[0]),
	ENTITY_PARROT_IMITATE_ZOGLIN(new String[0]),
	ENTITY_PARROT_IMITATE_ZOMBIE(new String[0]),
	ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER(new String[0]),
	ENTITY_PARROT_STEP(new String[0]),
	ENTITY_PHANTOM_AMBIENT(new String[0]),
	ENTITY_PHANTOM_BITE(new String[0]),
	ENTITY_PHANTOM_DEATH(new String[0]),
	ENTITY_PHANTOM_FLAP(new String[0]),
	ENTITY_PHANTOM_HURT(new String[0]),
	ENTITY_PHANTOM_SWOOP(new String[0]),
	ENTITY_PIGLIN_ADMIRING_ITEM(new String[0]),
	ENTITY_PIGLIN_AMBIENT(new String[0]),
	ENTITY_PIGLIN_ANGRY(new String[0]),
	ENTITY_PIGLIN_BRUTE_AMBIENT(new String[0]),
	ENTITY_PIGLIN_BRUTE_ANGRY(new String[0]),
	ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED(new String[0]),
	ENTITY_PIGLIN_BRUTE_DEATH(new String[0]),
	ENTITY_PIGLIN_BRUTE_HURT(new String[0]),
	ENTITY_PIGLIN_BRUTE_STEP(new String[0]),
	ENTITY_PIGLIN_CELEBRATE(new String[0]),
	ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED(new String[0]),
	ENTITY_PIGLIN_DEATH(new String[0]),
	ENTITY_PIGLIN_HURT(new String[0]),
	ENTITY_PIGLIN_JEALOUS(new String[0]),
	ENTITY_PIGLIN_RETREAT(new String[0]),
	ENTITY_PIGLIN_STEP(new String[0]),
	ENTITY_PIG_AMBIENT(new String[]{"PIG_IDLE"}),
	ENTITY_PIG_DEATH(new String[]{"PIG_DEATH"}),
	ENTITY_PIG_HURT(new String[0]),
	ENTITY_PIG_SADDLE(new String[]{"ENTITY_PIG_HURT"}),
	ENTITY_PIG_STEP(new String[]{"PIG_WALK"}),
	ENTITY_PILLAGER_AMBIENT(new String[0]),
	ENTITY_PILLAGER_CELEBRATE(new String[0]),
	ENTITY_PILLAGER_DEATH(new String[0]),
	ENTITY_PILLAGER_HURT(new String[0]),
	ENTITY_PLAYER_ATTACK_CRIT(new String[0]),
	ENTITY_PLAYER_ATTACK_KNOCKBACK(new String[0]),
	ENTITY_PLAYER_ATTACK_NODAMAGE(new String[0]),
	ENTITY_PLAYER_ATTACK_STRONG(new String[]{"SUCCESSFUL_HIT"}),
	ENTITY_PLAYER_ATTACK_SWEEP(new String[0]),
	ENTITY_PLAYER_ATTACK_WEAK(new String[0]),
	ENTITY_PLAYER_BIG_FALL(new String[]{"FALL_BIG"}),
	ENTITY_PLAYER_BREATH(new String[0]),
	ENTITY_PLAYER_BURP(new String[]{"BURP"}),
	ENTITY_PLAYER_DEATH(new String[0]),
	ENTITY_PLAYER_HURT(new String[]{"HURT_FLESH"}),
	ENTITY_PLAYER_HURT_DROWN(new String[0]),
	ENTITY_PLAYER_HURT_FREEZE(new String[0]),
	ENTITY_PLAYER_HURT_ON_FIRE(new String[0]),
	ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH(new String[0]),
	ENTITY_PLAYER_LEVELUP(new String[]{"LEVEL_UP"}),
	ENTITY_PLAYER_SMALL_FALL(new String[]{"FALL_SMALL"}),
	ENTITY_PLAYER_SPLASH(new String[]{"SLASH"}),
	ENTITY_PLAYER_SPLASH_HIGH_SPEED(new String[]{"SPLASH"}),
	ENTITY_PLAYER_SWIM(new String[]{"SWIM"}),
	ENTITY_PLAYER_TELEPORT(new String[0]),
	ENTITY_POLAR_BEAR_AMBIENT(new String[0]),
	ENTITY_POLAR_BEAR_AMBIENT_BABY(new String[]{"ENTITY_POLAR_BEAR_BABY_AMBIENT"}),
	ENTITY_POLAR_BEAR_DEATH(new String[0]),
	ENTITY_POLAR_BEAR_HURT(new String[0]),
	ENTITY_POLAR_BEAR_STEP(new String[0]),
	ENTITY_POLAR_BEAR_WARNING(new String[0]),
	ENTITY_PUFFER_FISH_AMBIENT(new String[0]),
	ENTITY_PUFFER_FISH_BLOW_OUT(new String[0]),
	ENTITY_PUFFER_FISH_BLOW_UP(new String[0]),
	ENTITY_PUFFER_FISH_DEATH(new String[0]),
	ENTITY_PUFFER_FISH_FLOP(new String[0]),
	ENTITY_PUFFER_FISH_HURT(new String[0]),
	ENTITY_PUFFER_FISH_STING(new String[0]),
	ENTITY_RABBIT_AMBIENT(new String[0]),
	ENTITY_RABBIT_ATTACK(new String[0]),
	ENTITY_RABBIT_DEATH(new String[0]),
	ENTITY_RABBIT_HURT(new String[0]),
	ENTITY_RABBIT_JUMP(new String[0]),
	ENTITY_RAVAGER_AMBIENT(new String[0]),
	ENTITY_RAVAGER_ATTACK(new String[0]),
	ENTITY_RAVAGER_CELEBRATE(new String[0]),
	ENTITY_RAVAGER_DEATH(new String[0]),
	ENTITY_RAVAGER_HURT(new String[0]),
	ENTITY_RAVAGER_ROAR(new String[0]),
	ENTITY_RAVAGER_STEP(new String[0]),
	ENTITY_RAVAGER_STUNNED(new String[0]),
	ENTITY_SALMON_AMBIENT(new String[0]),
	ENTITY_SALMON_DEATH(new String[0]),
	ENTITY_SALMON_FLOP(new String[0]),
	ENTITY_SALMON_HURT(new String[]{"ENTITY_SALMON_FLOP"}),
	ENTITY_SHEEP_AMBIENT(new String[]{"SHEEP_IDLE"}),
	ENTITY_SHEEP_DEATH(new String[0]),
	ENTITY_SHEEP_HURT(new String[0]),
	ENTITY_SHEEP_SHEAR(new String[]{"SHEEP_SHEAR"}),
	ENTITY_SHEEP_STEP(new String[]{"SHEEP_WALK"}),
	ENTITY_SHULKER_AMBIENT(new String[0]),
	ENTITY_SHULKER_BULLET_HIT(new String[0]),
	ENTITY_SHULKER_BULLET_HURT(new String[0]),
	ENTITY_SHULKER_CLOSE(new String[0]),
	ENTITY_SHULKER_DEATH(new String[0]),
	ENTITY_SHULKER_HURT(new String[0]),
	ENTITY_SHULKER_HURT_CLOSED(new String[0]),
	ENTITY_SHULKER_OPEN(new String[0]),
	ENTITY_SHULKER_SHOOT(new String[0]),
	ENTITY_SHULKER_TELEPORT(new String[0]),
	ENTITY_SILVERFISH_AMBIENT(new String[]{"SILVERFISH_IDLE"}),
	ENTITY_SILVERFISH_DEATH(new String[]{"SILVERFISH_KILL"}),
	ENTITY_SILVERFISH_HURT(new String[]{"SILVERFISH_HIT"}),
	ENTITY_SILVERFISH_STEP(new String[]{"SILVERFISH_WALK"}),
	ENTITY_SKELETON_AMBIENT(new String[]{"SKELETON_IDLE"}),
	ENTITY_SKELETON_CONVERTED_TO_STRAY(new String[0]),
	ENTITY_SKELETON_DEATH(new String[]{"SKELETON_DEATH"}),
	ENTITY_SKELETON_HORSE_AMBIENT(new String[]{"HORSE_SKELETON_IDLE"}),
	ENTITY_SKELETON_HORSE_AMBIENT_WATER(new String[0]),
	ENTITY_SKELETON_HORSE_DEATH(new String[]{"HORSE_SKELETON_DEATH"}),
	ENTITY_SKELETON_HORSE_GALLOP_WATER(new String[0]),
	ENTITY_SKELETON_HORSE_HURT(new String[]{"HORSE_SKELETON_HIT"}),
	ENTITY_SKELETON_HORSE_JUMP_WATER(new String[0]),
	ENTITY_SKELETON_HORSE_STEP_WATER(new String[0]),
	ENTITY_SKELETON_HORSE_SWIM(new String[0]),
	ENTITY_SKELETON_HURT(new String[]{"SKELETON_HURT"}),
	ENTITY_SKELETON_SHOOT(new String[0]),
	ENTITY_SKELETON_STEP(new String[]{"SKELETON_WALK"}),
	ENTITY_SLIME_ATTACK(new String[]{"SLIME_ATTACK"}),
	ENTITY_SLIME_DEATH(new String[0]),
	ENTITY_SLIME_DEATH_SMALL(new String[0]),
	ENTITY_SLIME_HURT(new String[0]),
	ENTITY_SLIME_HURT_SMALL(new String[]{"ENTITY_SMALL_SLIME_HURT"}),
	ENTITY_SLIME_JUMP(new String[]{"SLIME_WALK"}),
	ENTITY_SLIME_JUMP_SMALL(new String[]{"SLIME_WALK2", "ENTITY_SMALL_SLIME_SQUISH"}),
	ENTITY_SLIME_SQUISH(new String[]{"SLIME_WALK2"}),
	ENTITY_SLIME_SQUISH_SMALL(new String[]{"ENTITY_SMALL_SLIME_SQUISH"}),
	ENTITY_SNIFFER_DEATH(new String[0]),
	ENTITY_SNIFFER_DIGGING(new String[0]),
	ENTITY_SNIFFER_DIGGING_STOP(new String[0]),
	ENTITY_SNIFFER_DROP_SEED(new String[0]),
	ENTITY_SNIFFER_EAT(new String[0]),
	ENTITY_SNIFFER_HAPPY(new String[0]),
	ENTITY_SNIFFER_HURT(new String[0]),
	ENTITY_SNIFFER_IDLE(new String[0]),
	ENTITY_SNIFFER_SCENTING(new String[0]),
	ENTITY_SNIFFER_SEARCHING(new String[0]),
	ENTITY_SNIFFER_SNIFFING(new String[0]),
	ENTITY_SNIFFER_STEP(new String[0]),
	ENTITY_SNOWBALL_THROW(new String[0]),
	ENTITY_SNOW_GOLEM_AMBIENT(new String[]{"ENTITY_SNOWMAN_AMBIENT"}),
	ENTITY_SNOW_GOLEM_DEATH(new String[]{"ENTITY_SNOWMAN_DEATH"}),
	ENTITY_SNOW_GOLEM_HURT(new String[]{"ENTITY_SNOWMAN_HURT"}),
	ENTITY_SNOW_GOLEM_SHEAR(new String[0]),
	ENTITY_SNOW_GOLEM_SHOOT(new String[]{"ENTITY_SNOWMAN_SHOOT"}),
	ENTITY_SPIDER_AMBIENT(new String[]{"SPIDER_IDLE"}),
	ENTITY_SPIDER_DEATH(new String[]{"SPIDER_DEATH"}),
	ENTITY_SPIDER_HURT(new String[0]),
	ENTITY_SPIDER_STEP(new String[]{"SPIDER_WALK"}),
	ENTITY_SPLASH_POTION_BREAK(new String[0]),
	ENTITY_SPLASH_POTION_THROW(new String[0]),
	ENTITY_SQUID_AMBIENT(new String[0]),
	ENTITY_SQUID_DEATH(new String[0]),
	ENTITY_SQUID_HURT(new String[0]),
	ENTITY_SQUID_SQUIRT(new String[0]),
	ENTITY_STRAY_AMBIENT(new String[0]),
	ENTITY_STRAY_DEATH(new String[0]),
	ENTITY_STRAY_HURT(new String[0]),
	ENTITY_STRAY_STEP(new String[0]),
	ENTITY_STRIDER_AMBIENT(new String[0]),
	ENTITY_STRIDER_DEATH(new String[0]),
	ENTITY_STRIDER_EAT(new String[0]),
	ENTITY_STRIDER_HAPPY(new String[0]),
	ENTITY_STRIDER_HURT(new String[0]),
	ENTITY_STRIDER_RETREAT(new String[0]),
	ENTITY_STRIDER_SADDLE(new String[0]),
	ENTITY_STRIDER_STEP(new String[0]),
	ENTITY_STRIDER_STEP_LAVA(new String[0]),
	ENTITY_TADPOLE_DEATH(new String[0]),
	ENTITY_TADPOLE_FLOP(new String[0]),
	ENTITY_TADPOLE_GROW_UP(new String[0]),
	ENTITY_TADPOLE_HURT(new String[0]),
	ENTITY_TNT_PRIMED(new String[]{"FUSE"}),
	ENTITY_TROPICAL_FISH_AMBIENT(new String[0]),
	ENTITY_TROPICAL_FISH_DEATH(new String[0]),
	ENTITY_TROPICAL_FISH_FLOP(new String[]{"ENTITY_TROPICAL_FISH_DEATH"}),
	ENTITY_TROPICAL_FISH_HURT(new String[0]),
	ENTITY_TURTLE_AMBIENT_LAND(new String[0]),
	ENTITY_TURTLE_DEATH(new String[0]),
	ENTITY_TURTLE_DEATH_BABY(new String[0]),
	ENTITY_TURTLE_EGG_BREAK(new String[0]),
	ENTITY_TURTLE_EGG_CRACK(new String[0]),
	ENTITY_TURTLE_EGG_HATCH(new String[0]),
	ENTITY_TURTLE_HURT(new String[0]),
	ENTITY_TURTLE_HURT_BABY(new String[0]),
	ENTITY_TURTLE_LAY_EGG(new String[0]),
	ENTITY_TURTLE_SHAMBLE(new String[0]),
	ENTITY_TURTLE_SHAMBLE_BABY(new String[0]),
	ENTITY_TURTLE_SWIM(new String[0]),
	ENTITY_VEX_AMBIENT(new String[0]),
	ENTITY_VEX_CHARGE(new String[0]),
	ENTITY_VEX_DEATH(new String[0]),
	ENTITY_VEX_HURT(new String[0]),
	ENTITY_VILLAGER_AMBIENT(new String[]{"VILLAGER_IDLE"}),
	ENTITY_VILLAGER_CELEBRATE(new String[0]),
	ENTITY_VILLAGER_DEATH(new String[]{"VILLAGER_DEATH"}),
	ENTITY_VILLAGER_HURT(new String[]{"VILLAGER_HIT"}),
	ENTITY_VILLAGER_NO(new String[]{"VILLAGER_NO"}),
	ENTITY_VILLAGER_TRADE(new String[]{"VILLAGER_HAGGLE", "ENTITY_VILLAGER_TRADING"}),
	ENTITY_VILLAGER_WORK_ARMORER(new String[0]),
	ENTITY_VILLAGER_WORK_BUTCHER(new String[0]),
	ENTITY_VILLAGER_WORK_CARTOGRAPHER(new String[0]),
	ENTITY_VILLAGER_WORK_CLERIC(new String[0]),
	ENTITY_VILLAGER_WORK_FARMER(new String[0]),
	ENTITY_VILLAGER_WORK_FISHERMAN(new String[0]),
	ENTITY_VILLAGER_WORK_FLETCHER(new String[0]),
	ENTITY_VILLAGER_WORK_LEATHERWORKER(new String[0]),
	ENTITY_VILLAGER_WORK_LIBRARIAN(new String[0]),
	ENTITY_VILLAGER_WORK_MASON(new String[0]),
	ENTITY_VILLAGER_WORK_SHEPHERD(new String[0]),
	ENTITY_VILLAGER_WORK_TOOLSMITH(new String[0]),
	ENTITY_VILLAGER_WORK_WEAPONSMITH(new String[0]),
	ENTITY_VILLAGER_YES(new String[]{"VILLAGER_YES"}),
	ENTITY_VINDICATOR_AMBIENT(new String[]{"ENTITY_VINDICATION_ILLAGER_AMBIENT"}),
	ENTITY_VINDICATOR_CELEBRATE(new String[0]),
	ENTITY_VINDICATOR_DEATH(new String[]{"ENTITY_VINDICATION_ILLAGER_DEATH"}),
	ENTITY_VINDICATOR_HURT(new String[]{"ENTITY_VINDICATION_ILLAGER_HURT"}),
	ENTITY_WANDERING_TRADER_AMBIENT(new String[0]),
	ENTITY_WANDERING_TRADER_DEATH(new String[0]),
	ENTITY_WANDERING_TRADER_DISAPPEARED(new String[0]),
	ENTITY_WANDERING_TRADER_DRINK_MILK(new String[0]),
	ENTITY_WANDERING_TRADER_DRINK_POTION(new String[0]),
	ENTITY_WANDERING_TRADER_HURT(new String[0]),
	ENTITY_WANDERING_TRADER_NO(new String[0]),
	ENTITY_WANDERING_TRADER_REAPPEARED(new String[0]),
	ENTITY_WANDERING_TRADER_TRADE(new String[0]),
	ENTITY_WANDERING_TRADER_YES(new String[0]),
	ENTITY_WARDEN_AGITATED(new String[0]),
	ENTITY_WARDEN_AMBIENT(new String[0]),
	ENTITY_WARDEN_ANGRY(new String[0]),
	ENTITY_WARDEN_ATTACK_IMPACT(new String[0]),
	ENTITY_WARDEN_DEATH(new String[0]),
	ENTITY_WARDEN_DIG(new String[0]),
	ENTITY_WARDEN_EMERGE(new String[0]),
	ENTITY_WARDEN_HEARTBEAT(new String[0]),
	ENTITY_WARDEN_HURT(new String[0]),
	ENTITY_WARDEN_LISTENING(new String[0]),
	ENTITY_WARDEN_LISTENING_ANGRY(new String[0]),
	ENTITY_WARDEN_NEARBY_CLOSE(new String[0]),
	ENTITY_WARDEN_NEARBY_CLOSER(new String[0]),
	ENTITY_WARDEN_NEARBY_CLOSEST(new String[0]),
	ENTITY_WARDEN_ROAR(new String[0]),
	ENTITY_WARDEN_SNIFF(new String[0]),
	ENTITY_WARDEN_SONIC_BOOM(new String[0]),
	ENTITY_WARDEN_SONIC_CHARGE(new String[0]),
	ENTITY_WARDEN_STEP(new String[0]),
	ENTITY_WARDEN_TENDRIL_CLICKS(new String[0]),
	ENTITY_WITCH_AMBIENT(new String[0]),
	ENTITY_WITCH_CELEBRATE(new String[0]),
	ENTITY_WITCH_DEATH(new String[0]),
	ENTITY_WITCH_DRINK(new String[0]),
	ENTITY_WITCH_HURT(new String[0]),
	ENTITY_WITCH_THROW(new String[0]),
	ENTITY_WITHER_AMBIENT(new String[]{"WITHER_IDLE"}),
	ENTITY_WITHER_BREAK_BLOCK(new String[0]),
	ENTITY_WITHER_DEATH(new String[]{"WITHER_DEATH"}),
	ENTITY_WITHER_HURT(new String[]{"WITHER_HURT"}),
	ENTITY_WITHER_SHOOT(new String[]{"WITHER_SHOOT"}),
	ENTITY_WITHER_SKELETON_AMBIENT(new String[0]),
	ENTITY_WITHER_SKELETON_DEATH(new String[0]),
	ENTITY_WITHER_SKELETON_HURT(new String[0]),
	ENTITY_WITHER_SKELETON_STEP(new String[0]),
	ENTITY_WITHER_SPAWN(new String[]{"WITHER_SPAWN"}),
	ENTITY_WOLF_AMBIENT(new String[]{"WOLF_BARK"}),
	ENTITY_WOLF_DEATH(new String[]{"WOLF_DEATH"}),
	ENTITY_WOLF_GROWL(new String[]{"WOLF_GROWL"}),
	ENTITY_WOLF_HOWL(new String[]{"WOLF_HOWL"}),
	ENTITY_WOLF_HURT(new String[]{"WOLF_HURT"}),
	ENTITY_WOLF_PANT(new String[]{"WOLF_PANT"}),
	ENTITY_WOLF_SHAKE(new String[]{"WOLF_SHAKE"}),
	ENTITY_WOLF_STEP(new String[]{"WOLF_WALK"}),
	ENTITY_WOLF_WHINE(new String[]{"WOLF_WHINE"}),
	ENTITY_ZOGLIN_AMBIENT(new String[0]),
	ENTITY_ZOGLIN_ANGRY(new String[0]),
	ENTITY_ZOGLIN_ATTACK(new String[0]),
	ENTITY_ZOGLIN_DEATH(new String[0]),
	ENTITY_ZOGLIN_HURT(new String[0]),
	ENTITY_ZOGLIN_STEP(new String[0]),
	ENTITY_ZOMBIE_AMBIENT(new String[]{"ZOMBIE_IDLE"}),
	ENTITY_ZOMBIE_ATTACK_IRON_DOOR(new String[]{"ZOMBIE_METAL"}),
	ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR(new String[]{"ZOMBIE_WOOD", "ENTITY_ZOMBIE_ATTACK_DOOR_WOOD"}),
	ENTITY_ZOMBIE_BREAK_WOODEN_DOOR(new String[]{"ZOMBIE_WOODBREAK", "ENTITY_ZOMBIE_BREAK_DOOR_WOOD"}),
	ENTITY_ZOMBIE_CONVERTED_TO_DROWNED(new String[0]),
	ENTITY_ZOMBIE_DEATH(new String[]{"ZOMBIE_DEATH"}),
	ENTITY_ZOMBIE_DESTROY_EGG(new String[0]),
	ENTITY_ZOMBIE_HORSE_AMBIENT(new String[]{"HORSE_ZOMBIE_IDLE"}),
	ENTITY_ZOMBIE_HORSE_DEATH(new String[]{"HORSE_ZOMBIE_DEATH"}),
	ENTITY_ZOMBIE_HORSE_HURT(new String[]{"HORSE_ZOMBIE_HIT"}),
	ENTITY_ZOMBIE_HURT(new String[]{"ZOMBIE_HURT"}),
	ENTITY_ZOMBIE_INFECT(new String[]{"ZOMBIE_INFECT"}),
	ENTITY_ZOMBIE_STEP(new String[]{"ZOMBIE_WALK"}),
	ENTITY_ZOMBIE_VILLAGER_AMBIENT(new String[0]),
	ENTITY_ZOMBIE_VILLAGER_CONVERTED(new String[]{"ZOMBIE_UNFECT"}),
	ENTITY_ZOMBIE_VILLAGER_CURE(new String[]{"ZOMBIE_REMEDY"}),
	ENTITY_ZOMBIE_VILLAGER_DEATH(new String[0]),
	ENTITY_ZOMBIE_VILLAGER_HURT(new String[0]),
	ENTITY_ZOMBIE_VILLAGER_STEP(new String[0]),
	ENTITY_ZOMBIFIED_PIGLIN_AMBIENT(new String[]{"ZOMBIE_PIG_IDLE", "ENTITY_ZOMBIE_PIG_AMBIENT", "ENTITY_ZOMBIE_PIGMAN_AMBIENT"}),
	ENTITY_ZOMBIFIED_PIGLIN_ANGRY(new String[]{"ZOMBIE_PIG_ANGRY", "ENTITY_ZOMBIE_PIG_ANGRY", "ENTITY_ZOMBIE_PIGMAN_ANGRY"}),
	ENTITY_ZOMBIFIED_PIGLIN_DEATH(new String[]{"ZOMBIE_PIG_DEATH", "ENTITY_ZOMBIE_PIG_DEATH", "ENTITY_ZOMBIE_PIGMAN_DEATH"}),
	ENTITY_ZOMBIFIED_PIGLIN_HURT(new String[]{"ZOMBIE_PIG_HURT", "ENTITY_ZOMBIE_PIG_HURT", "ENTITY_ZOMBIE_PIGMAN_HURT"}),
	EVENT_RAID_HORN(new String[0]),
	INTENTIONALLY_EMPTY(new String[0]),
	ITEM_ARMOR_EQUIP_CHAIN(new String[0]),
	ITEM_ARMOR_EQUIP_DIAMOND(new String[0]),
	ITEM_ARMOR_EQUIP_ELYTRA(new String[0]),
	ITEM_ARMOR_EQUIP_GENERIC(new String[0]),
	ITEM_ARMOR_EQUIP_GOLD(new String[0]),
	ITEM_ARMOR_EQUIP_IRON(new String[0]),
	ITEM_ARMOR_EQUIP_LEATHER(new String[0]),
	ITEM_ARMOR_EQUIP_NETHERITE(new String[0]),
	ITEM_ARMOR_EQUIP_TURTLE(new String[0]),
	ITEM_AXE_SCRAPE(new String[0]),
	ITEM_AXE_STRIP(new String[0]),
	ITEM_AXE_WAX_OFF(new String[0]),
	ITEM_BONE_MEAL_USE(new String[0]),
	ITEM_BOOK_PAGE_TURN(new String[0]),
	ITEM_BOOK_PUT(new String[0]),
	ITEM_BOTTLE_EMPTY(new String[0]),
	ITEM_BOTTLE_FILL(new String[0]),
	ITEM_BOTTLE_FILL_DRAGONBREATH(new String[0]),
	ITEM_BRUSH_BRUSHING(new String[0]),
	ITEM_BRUSH_BRUSHING_GENERIC(new String[0]),
	ITEM_BRUSH_BRUSHING_GRAVEL(new String[0]),
	ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE(new String[0]),
	ITEM_BRUSH_BRUSHING_SAND(new String[0]),
	ITEM_BRUSH_BRUSHING_SAND_COMPLETE(new String[0]),
	ITEM_BRUSH_BRUSH_SAND_COMPLETED(new String[0]),
	ITEM_BUCKET_EMPTY(new String[0]),
	ITEM_BUCKET_EMPTY_AXOLOTL(new String[0]),
	ITEM_BUCKET_EMPTY_FISH(new String[0]),
	ITEM_BUCKET_EMPTY_LAVA(new String[0]),
	ITEM_BUCKET_EMPTY_POWDER_SNOW(new String[0]),
	ITEM_BUCKET_EMPTY_TADPOLE(new String[0]),
	ITEM_BUCKET_FILL(new String[0]),
	ITEM_BUCKET_FILL_AXOLOTL(new String[0]),
	ITEM_BUCKET_FILL_FISH(new String[0]),
	ITEM_BUCKET_FILL_LAVA(new String[0]),
	ITEM_BUCKET_FILL_POWDER_SNOW(new String[0]),
	ITEM_BUCKET_FILL_TADPOLE(new String[0]),
	ITEM_BUNDLE_DROP_CONTENTS(new String[0]),
	ITEM_BUNDLE_INSERT(new String[0]),
	ITEM_BUNDLE_REMOVE_ONE(new String[0]),
	ITEM_CHORUS_FRUIT_TELEPORT(new String[0]),
	ITEM_CROP_PLANT(new String[0]),
	ITEM_CROSSBOW_HIT(new String[0]),
	ITEM_CROSSBOW_LOADING_END(new String[0]),
	ITEM_CROSSBOW_LOADING_MIDDLE(new String[0]),
	ITEM_CROSSBOW_LOADING_START(new String[0]),
	ITEM_CROSSBOW_QUICK_CHARGE_1(new String[0]),
	ITEM_CROSSBOW_QUICK_CHARGE_2(new String[0]),
	ITEM_CROSSBOW_QUICK_CHARGE_3(new String[0]),
	ITEM_CROSSBOW_SHOOT(new String[0]),
	ITEM_DYE_USE(new String[0]),
	ITEM_ELYTRA_FLYING(new String[0]),
	ITEM_FIRECHARGE_USE(new String[0]),
	ITEM_FLINTANDSTEEL_USE(new String[]{"FIRE_IGNITE"}),
	ITEM_GLOW_INK_SAC_USE(new String[0]),
	ITEM_GOAT_HORN_PLAY(new String[0]),
	ITEM_GOAT_HORN_SOUND_0(new String[0]),
	ITEM_GOAT_HORN_SOUND_1(new String[0]),
	ITEM_GOAT_HORN_SOUND_2(new String[0]),
	ITEM_GOAT_HORN_SOUND_3(new String[0]),
	ITEM_GOAT_HORN_SOUND_4(new String[0]),
	ITEM_GOAT_HORN_SOUND_5(new String[0]),
	ITEM_GOAT_HORN_SOUND_6(new String[0]),
	ITEM_GOAT_HORN_SOUND_7(new String[0]),
	ITEM_HOE_TILL(new String[0]),
	ITEM_HONEYCOMB_WAX_ON(new String[0]),
	ITEM_HONEY_BOTTLE_DRINK(new String[0]),
	ITEM_INK_SAC_USE(new String[0]),
	ITEM_LODESTONE_COMPASS_LOCK(new String[0]),
	ITEM_NETHER_WART_PLANT(new String[0]),
	ITEM_SHIELD_BLOCK(new String[0]),
	ITEM_SHIELD_BREAK(new String[0]),
	ITEM_SHOVEL_FLATTEN(new String[0]),
	ITEM_SPYGLASS_STOP_USING(new String[0]),
	ITEM_SPYGLASS_USE(new String[0]),
	ITEM_TOTEM_USE(new String[0]),
	ITEM_TRIDENT_HIT(new String[0]),
	ITEM_TRIDENT_HIT_GROUND(new String[0]),
	ITEM_TRIDENT_RETURN(new String[0]),
	ITEM_TRIDENT_RIPTIDE_1(new String[0]),
	ITEM_TRIDENT_RIPTIDE_2(new String[]{"ITEM_TRIDENT_RIPTIDE_1"}),
	ITEM_TRIDENT_RIPTIDE_3(new String[]{"ITEM_TRIDENT_RIPTIDE_1"}),
	ITEM_TRIDENT_THROW(new String[0]),
	ITEM_TRIDENT_THUNDER(new String[0]),
	MUSIC_CREATIVE(new String[0]),
	MUSIC_CREDITS(new String[0]),
	MUSIC_DISC_11(new String[]{"RECORD_11"}),
	MUSIC_DISC_13(new String[]{"RECORD_13"}),
	MUSIC_DISC_5(new String[0]),
	MUSIC_DISC_BLOCKS(new String[]{"RECORD_BLOCKS"}),
	MUSIC_DISC_CAT(new String[]{"RECORD_CAT"}),
	MUSIC_DISC_CHIRP(new String[]{"RECORD_CHIRP"}),
	MUSIC_DISC_FAR(new String[]{"RECORD_FAR"}),
	MUSIC_DISC_MALL(new String[]{"RECORD_MALL"}),
	MUSIC_DISC_MELLOHI(new String[]{"RECORD_MELLOHI"}),
	MUSIC_DISC_OTHERSIDE(new String[0]),
	MUSIC_DISC_PIGSTEP(new String[0]),
	MUSIC_DISC_RELIC(new String[0]),
	MUSIC_DISC_STAL(new String[]{"RECORD_STAL"}),
	MUSIC_DISC_STRAD(new String[]{"RECORD_STRAD"}),
	MUSIC_DISC_WAIT(new String[]{"RECORD_WAIT"}),
	MUSIC_DISC_WARD(new String[]{"RECORD_WARD"}),
	MUSIC_DRAGON(new String[0]),
	MUSIC_END(new String[0]),
	MUSIC_GAME(new String[0]),
	MUSIC_MENU(new String[0]),
	MUSIC_NETHER_BASALT_DELTAS(new String[]{"MUSIC_NETHER"}),
	MUSIC_NETHER_CRIMSON_FOREST(new String[0]),
	MUSIC_NETHER_NETHER_WASTES(new String[0]),
	MUSIC_NETHER_SOUL_SAND_VALLEY(new String[0]),
	MUSIC_NETHER_WARPED_FOREST(new String[0]),
	MUSIC_OVERWORLD_BADLANDS(new String[0]),
	MUSIC_OVERWORLD_BAMBOO_JUNGLE(new String[0]),
	MUSIC_OVERWORLD_CHERRY_GROVE(new String[0]),
	MUSIC_OVERWORLD_DEEP_DARK(new String[0]),
	MUSIC_OVERWORLD_DESERT(new String[0]),
	MUSIC_OVERWORLD_DRIPSTONE_CAVES(new String[0]),
	MUSIC_OVERWORLD_FLOWER_FOREST(new String[0]),
	MUSIC_OVERWORLD_FOREST(new String[0]),
	MUSIC_OVERWORLD_FROZEN_PEAKS(new String[0]),
	MUSIC_OVERWORLD_GROVE(new String[0]),
	MUSIC_OVERWORLD_JAGGED_PEAKS(new String[0]),
	MUSIC_OVERWORLD_JUNGLE(new String[0]),
	MUSIC_OVERWORLD_JUNGLE_AND_FOREST(new String[0]),
	MUSIC_OVERWORLD_LUSH_CAVES(new String[0]),
	MUSIC_OVERWORLD_MEADOW(new String[0]),
	MUSIC_OVERWORLD_OLD_GROWTH_TAIGA(new String[0]),
	MUSIC_OVERWORLD_SNOWY_SLOPES(new String[0]),
	MUSIC_OVERWORLD_SPARSE_JUNGLE(new String[0]),
	MUSIC_OVERWORLD_STONY_PEAKS(new String[0]),
	MUSIC_OVERWORLD_SWAMP(new String[0]),
	MUSIC_UNDER_WATER(new String[0]),
	PARTICLE_SOUL_ESCAPE(new String[0]),
	UI_BUTTON_CLICK(new String[]{"CLICK"}),
	UI_CARTOGRAPHY_TABLE_TAKE_RESULT(new String[0]),
	UI_LOOM_SELECT_PATTERN(new String[0]),
	UI_LOOM_TAKE_RESULT(new String[0]),
	UI_STONECUTTER_SELECT_RECIPE(new String[0]),
	UI_STONECUTTER_TAKE_RESULT(new String[0]),
	UI_TOAST_CHALLENGE_COMPLETE(new String[0]),
	UI_TOAST_IN(new String[0]),
	UI_TOAST_OUT(new String[0]),
	WEATHER_RAIN(new String[]{"AMBIENCE_RAIN"}),
	WEATHER_RAIN_ABOVE(new String[0]);

	public static final XSound[] VALUES = values();
	@Unmodifiable
	public static final Set<XSound> MUSIC = Collections.unmodifiableSet(EnumSet.copyOf((Collection)Arrays.stream(VALUES).filter((x) -> {
		return x.name().startsWith("MUSIC");
	}).collect(Collectors.toList())));
	public static final float DEFAULT_VOLUME = 1.0F;
	public static final float DEFAULT_PITCH = 1.0F;
	public static final Pattern NAMESPACED_SOUND_PATTERN = Pattern.compile("(?<namespace>[a-z0-9._-]+):(?<key>[a-z0-9/._-]+)");
	public static final Pattern RECORD_PATTERN = Pattern.compile("\\s*(?<atLocation>~)?\\s*(?:(?<category>[\\w$_]+)@)?(?<sound>[\\w$_]+|" + NAMESPACED_SOUND_PATTERN.pattern() + ")\\s*(?:,\\s*(?<volume>[+-]?(?:\\d*\\.)?\\d+)\\s*(?:,\\s*(?<pitch>[+-]?(?:\\d*\\.)?\\d+))?)?\\s*");
	@Nullable
	private final Sound sound;

	private XSound(@Nonnull String... param3) {
		Sound bukkitSound = (Sound)XSound.Data.BUKKIT_NAMES.get(this.name());
		String[] legacies = {  }; // Define legacies
		String[] var5;
		int var6;
		int var7;
		String legacy;

		if (bukkitSound == null) {
			var5 = legacies;
			var6 = legacies.length;

			for (var7 = 0; var7 < var6; ++var7) {
				legacy = var5[var7];
				bukkitSound = (Sound)XSound.Data.BUKKIT_NAMES.get(legacy);
				if (bukkitSound != null) {
					break;
				}
			}
		}

		this.sound = bukkitSound;
		XSound.Data.NAMES.put(this.name(), this);
		var5 = legacies;
		var6 = legacies.length;

		for (var7 = 0; var7 < var6; ++var7) {
			legacy = var5[var7];
			XSound.Data.NAMES.putIfAbsent(legacy, this);
		}
	}


	@Nonnull
	private static String format(@Nonnull String name) {
		int len = name.length();
		char[] chs = new char[len];
		int count = 0;
		boolean appendUnderline = false;

		for(int i = 0; i < len; ++i) {
			char ch = name.charAt(i);
			if (!appendUnderline && count != 0 && (ch == '-' || ch == ' ' || ch == '_') && chs[count] != '_') {
				appendUnderline = true;
			} else {
				boolean number = false;
				if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || (number = ch >= '0' && ch <= '9')) {
					if (appendUnderline) {
						chs[count++] = '_';
						appendUnderline = false;
					}

					if (number) {
						chs[count++] = ch;
					} else {
						chs[count++] = (char)(ch & 95);
					}
				}
			}
		}

		return new String(chs, 0, count);
	}

	@Nonnull
	public static Optional<XSound> matchXSound(@Nonnull String sound) {
		if (sound != null && !sound.isEmpty()) {
			return Optional.ofNullable((XSound)XSound.Data.NAMES.get(format(sound)));
		} else {
			throw new IllegalArgumentException("Cannot match XSound of a null or empty sound name");
		}
	}

	@Nonnull
	public static XSound matchXSound(@Nonnull Sound sound) {
		Objects.requireNonNull(sound, "Cannot match XSound of a null sound");
		return (XSound)Objects.requireNonNull((XSound)XSound.Data.NAMES.get(sound.name()), () -> {
			return "Unsupported sound: " + sound.name();
		});
	}

	private static List<String> split(@Nonnull String str, char separatorChar) {
		List<String> list = new ArrayList(4);
		boolean match = false;
		boolean lastMatch = false;
		int len = str.length();
		int start = 0;

		for(int i = 0; i < len; ++i) {
			if (str.charAt(i) == separatorChar) {
				if (match) {
					list.add(str.substring(start, i));
					match = false;
					lastMatch = true;
				}

				start = i + 1;
			} else {
				lastMatch = false;
				match = true;
			}
		}

		if (match || lastMatch) {
			list.add(str.substring(start, len));
		}

		return list;
	}

	@Nullable
	public static XSound.Record play(@Nullable String sound, Consumer<XSound.SoundPlayer> soundPlayer) {
		XSound.Record record;
		try {
			record = parse(sound);
		} catch (Throwable var4) {
			return null;
		}

		if (record == null) {
			return null;
		} else {
			XSound.SoundPlayer player = record.soundPlayer();
			soundPlayer.accept(player);
			player.play();
			return record;
		}
	}

	@Nullable
	public static XSound.Record parse(@Nullable String sound) {
		if (!Strings.isNullOrEmpty(sound) && !sound.equalsIgnoreCase("none")) {
			List<String> split = split(sound.replace(" ", ""), ',');
			XSound.Record record = new XSound.Record();
			String name = (String)split.get(0);
			if (name.charAt(0) == '~') {
				name = name.substring(1);
				record.publicSound(true);
			} else {
				record.publicSound(false);
			}

			if (name.isEmpty()) {
				throw new IllegalArgumentException("No sound name specified: " + sound);
			} else {
				int atIndex = name.indexOf(64);
				String soundName;
				if (atIndex != -1) {
					String category = name.substring(0, atIndex);
					soundName = name.substring(atIndex + 1);
					XSound.Category soundCategory = (XSound.Category)Enums.getIfPresent(XSound.Category.class, category.toUpperCase(Locale.ENGLISH)).orNull();
					if (soundCategory == null) {
						throw new IllegalArgumentException("Unknown sound category '" + category + "' in: " + sound);
					}

					record.inCategory(soundCategory);
				} else {
					soundName = name;
				}

				if (soundName.isEmpty()) {
					throw new IllegalArgumentException("No sound name specified: " + name);
				} else {
					Optional<XSound> soundType = matchXSound(soundName);
					if (!soundType.isPresent()) {
						if (soundName.indexOf(58) == -1) {
							throw new IllegalArgumentException("Unknown sound: " + name);
						}

						soundName = soundName.toLowerCase(Locale.ENGLISH);
						if (!NAMESPACED_SOUND_PATTERN.matcher(soundName).matches()) {
							throw new IllegalArgumentException("Unknown sound '" + soundName + "', invalid namespace characters: " + name);
						}

						record.withSound(soundName);
					} else {
						record.withSound((XSound)soundType.get());
					}

					String var10002;
					try {
						if (split.size() > 1) {
							record.withVolume(Float.parseFloat((String)split.get(1)));
						}
					} catch (NumberFormatException var9) {
						var10002 = (String)split.get(1);
						throw new NumberFormatException("Invalid number '" + var10002 + "' for sound volume '" + sound + "'");
					}

					try {
						if (split.size() > 2) {
							record.withPitch(Float.parseFloat((String)split.get(2)));
						}
					} catch (NumberFormatException var10) {
						var10002 = (String)split.get(2);
						throw new NumberFormatException("Invalid number '" + var10002 + "' for sound pitch '" + sound + "'");
					}

					try {
						if (split.size() > 3) {
							record.withSeed(Long.parseLong((String)split.get(3)));
						}

						return record;
					} catch (NumberFormatException var8) {
						var10002 = (String)split.get(3);
						throw new NumberFormatException("Invalid number '" + var10002 + "' for sound seed '" + sound + "'");
					}
				}
			}
		} else {
			return null;
		}
	}

	public static void stopMusic(@Nonnull Player player) {
		Objects.requireNonNull(player, "Cannot stop playing musics from null player");
		Iterator var1 = MUSIC.iterator();

		while(var1.hasNext()) {
			XSound music = (XSound)var1.next();
			Sound sound = music.parseSound();
			if (sound != null) {
				player.stopSound(sound);
			}
		}

	}

	public String toString() {
		return (String)Arrays.stream(this.name().split("_")).map((t) -> {
			char var10000 = t.charAt(0);
			return var10000 + t.substring(1).toLowerCase();
		}).collect(Collectors.joining(" "));
	}

	@Nullable
	public Sound parseSound() {
		return this.sound;
	}

	public boolean isSupported() {
		return this.parseSound() != null;
	}

	@Nullable
	public XSound or(@Nullable XSound alternateSound) {
		return this.isSupported() ? this : alternateSound;
	}

	public void stopSound(@Nonnull Player player) {
		Objects.requireNonNull(player, "Cannot stop playing sound from null player");
		Sound sound = this.parseSound();
		if (sound != null) {
			player.stopSound(sound);
		}

	}

	public void play(@Nonnull Entity entity) {
		Objects.requireNonNull(entity, "Cannot play sound for null entity");
		XSound.SoundPlayer soundPlayer = this.record().soundPlayer();
		if (entity instanceof Player) {
			soundPlayer.forPlayers((Player)entity);
		} else if (entity instanceof LivingEntity) {
			soundPlayer.atLocation(((LivingEntity)entity).getEyeLocation());
		} else {
			soundPlayer.atLocation(entity.getLocation());
		}

		soundPlayer.play();
	}

	public void play(@Nonnull Location location) {
		Objects.requireNonNull(location, "Cannot play sound at null location");
		this.record().soundPlayer().atLocation(location).play();
	}

	public XSound.Record record() {
		return (new XSound.Record()).withSound(this);
	}

	// $FF: synthetic method
	private static XSound[] $values() {
		return new XSound[]{AMBIENT_BASALT_DELTAS_ADDITIONS, AMBIENT_BASALT_DELTAS_LOOP, AMBIENT_BASALT_DELTAS_MOOD, AMBIENT_CAVE, AMBIENT_CRIMSON_FOREST_ADDITIONS, AMBIENT_CRIMSON_FOREST_LOOP, AMBIENT_CRIMSON_FOREST_MOOD, AMBIENT_NETHER_WASTES_ADDITIONS, AMBIENT_NETHER_WASTES_LOOP, AMBIENT_NETHER_WASTES_MOOD, AMBIENT_SOUL_SAND_VALLEY_ADDITIONS, AMBIENT_SOUL_SAND_VALLEY_LOOP, AMBIENT_SOUL_SAND_VALLEY_MOOD, AMBIENT_UNDERWATER_ENTER, AMBIENT_UNDERWATER_EXIT, AMBIENT_UNDERWATER_LOOP, AMBIENT_UNDERWATER_LOOP_ADDITIONS, AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE, AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE, AMBIENT_WARPED_FOREST_ADDITIONS, AMBIENT_WARPED_FOREST_LOOP, AMBIENT_WARPED_FOREST_MOOD, BLOCK_AMETHYST_BLOCK_BREAK, BLOCK_AMETHYST_BLOCK_CHIME, BLOCK_AMETHYST_BLOCK_FALL, BLOCK_AMETHYST_BLOCK_HIT, BLOCK_AMETHYST_BLOCK_PLACE, BLOCK_AMETHYST_BLOCK_RESONATE, BLOCK_AMETHYST_BLOCK_STEP, BLOCK_AMETHYST_CLUSTER_BREAK, BLOCK_AMETHYST_CLUSTER_FALL, BLOCK_AMETHYST_CLUSTER_HIT, BLOCK_AMETHYST_CLUSTER_PLACE, BLOCK_AMETHYST_CLUSTER_STEP, BLOCK_ANCIENT_DEBRIS_BREAK, BLOCK_ANCIENT_DEBRIS_FALL, BLOCK_ANCIENT_DEBRIS_HIT, BLOCK_ANCIENT_DEBRIS_PLACE, BLOCK_ANCIENT_DEBRIS_STEP, BLOCK_ANVIL_BREAK, BLOCK_ANVIL_DESTROY, BLOCK_ANVIL_FALL, BLOCK_ANVIL_HIT, BLOCK_ANVIL_LAND, BLOCK_ANVIL_PLACE, BLOCK_ANVIL_STEP, BLOCK_ANVIL_USE, BLOCK_AZALEA_BREAK, BLOCK_AZALEA_FALL, BLOCK_AZALEA_HIT, BLOCK_AZALEA_LEAVES_BREAK, BLOCK_AZALEA_LEAVES_FALL, BLOCK_AZALEA_LEAVES_HIT, BLOCK_AZALEA_LEAVES_PLACE, BLOCK_AZALEA_LEAVES_STEP, BLOCK_AZALEA_PLACE, BLOCK_AZALEA_STEP, BLOCK_BAMBOO_BREAK, BLOCK_BAMBOO_FALL, BLOCK_BAMBOO_HIT, BLOCK_BAMBOO_PLACE, BLOCK_BAMBOO_SAPLING_BREAK, BLOCK_BAMBOO_SAPLING_HIT, BLOCK_BAMBOO_SAPLING_PLACE, BLOCK_BAMBOO_STEP, BLOCK_BAMBOO_WOOD_BREAK, BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF, BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON, BLOCK_BAMBOO_WOOD_DOOR_CLOSE, BLOCK_BAMBOO_WOOD_DOOR_OPEN, BLOCK_BAMBOO_WOOD_FALL, BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE, BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN, BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK, BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL, BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT, BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE, BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP, BLOCK_BAMBOO_WOOD_HIT, BLOCK_BAMBOO_WOOD_PLACE, BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF, BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON, BLOCK_BAMBOO_WOOD_STEP, BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE, BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN, BLOCK_BARREL_CLOSE, BLOCK_BARREL_OPEN, BLOCK_BASALT_BREAK, BLOCK_BASALT_FALL, BLOCK_BASALT_HIT, BLOCK_BASALT_PLACE, BLOCK_BASALT_STEP, BLOCK_BEACON_ACTIVATE, BLOCK_BEACON_AMBIENT, BLOCK_BEACON_DEACTIVATE, BLOCK_BEACON_POWER_SELECT, BLOCK_BEEHIVE_DRIP, BLOCK_BEEHIVE_ENTER, BLOCK_BEEHIVE_EXIT, BLOCK_BEEHIVE_SHEAR, BLOCK_BEEHIVE_WORK, BLOCK_BELL_RESONATE, BLOCK_BELL_USE, BLOCK_BIG_DRIPLEAF_BREAK, BLOCK_BIG_DRIPLEAF_FALL, BLOCK_BIG_DRIPLEAF_HIT, BLOCK_BIG_DRIPLEAF_PLACE, BLOCK_BIG_DRIPLEAF_STEP, BLOCK_BIG_DRIPLEAF_TILT_DOWN, BLOCK_BIG_DRIPLEAF_TILT_UP, BLOCK_BLASTFURNACE_FIRE_CRACKLE, BLOCK_BONE_BLOCK_BREAK, BLOCK_BONE_BLOCK_FALL, BLOCK_BONE_BLOCK_HIT, BLOCK_BONE_BLOCK_PLACE, BLOCK_BONE_BLOCK_STEP, BLOCK_BREWING_STAND_BREW, BLOCK_BUBBLE_COLUMN_BUBBLE_POP, BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT, BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE, BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT, BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE, BLOCK_CAKE_ADD_CANDLE, BLOCK_CALCITE_BREAK, BLOCK_CALCITE_FALL, BLOCK_CALCITE_HIT, BLOCK_CALCITE_PLACE, BLOCK_CALCITE_STEP, BLOCK_CAMPFIRE_CRACKLE, BLOCK_CANDLE_AMBIENT, BLOCK_CANDLE_BREAK, BLOCK_CANDLE_EXTINGUISH, BLOCK_CANDLE_FALL, BLOCK_CANDLE_HIT, BLOCK_CANDLE_PLACE, BLOCK_CANDLE_STEP, BLOCK_CAVE_VINES_BREAK, BLOCK_CAVE_VINES_FALL, BLOCK_CAVE_VINES_HIT, BLOCK_CAVE_VINES_PICK_BERRIES, BLOCK_CAVE_VINES_PLACE, BLOCK_CAVE_VINES_STEP, BLOCK_CHAIN_BREAK, BLOCK_CHAIN_FALL, BLOCK_CHAIN_HIT, BLOCK_CHAIN_PLACE, BLOCK_CHAIN_STEP, BLOCK_CHERRY_LEAVES_BREAK, BLOCK_CHERRY_LEAVES_FALL, BLOCK_CHERRY_LEAVES_HIT, BLOCK_CHERRY_LEAVES_PLACE, BLOCK_CHERRY_LEAVES_STEP, BLOCK_CHERRY_SAPLING_BREAK, BLOCK_CHERRY_SAPLING_FALL, BLOCK_CHERRY_SAPLING_HIT, BLOCK_CHERRY_SAPLING_PLACE, BLOCK_CHERRY_SAPLING_STEP, BLOCK_CHERRY_WOOD_BREAK, BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF, BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON, BLOCK_CHERRY_WOOD_DOOR_CLOSE, BLOCK_CHERRY_WOOD_DOOR_OPEN, BLOCK_CHERRY_WOOD_FALL, BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE, BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN, BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK, BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL, BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT, BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE, BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP, BLOCK_CHERRY_WOOD_HIT, BLOCK_CHERRY_WOOD_PLACE, BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF, BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON, BLOCK_CHERRY_WOOD_STEP, BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE, BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN, BLOCK_CHEST_CLOSE, BLOCK_CHEST_LOCKED, BLOCK_CHEST_OPEN, BLOCK_CHISELED_BOOKSHELF_BREAK, BLOCK_CHISELED_BOOKSHELF_FALL, BLOCK_CHISELED_BOOKSHELF_HIT, BLOCK_CHISELED_BOOKSHELF_INSERT, BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED, BLOCK_CHISELED_BOOKSHELF_PICKUP, BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED, BLOCK_CHISELED_BOOKSHELF_PLACE, BLOCK_CHISELED_BOOKSHELF_STEP, BLOCK_CHORUS_FLOWER_DEATH, BLOCK_CHORUS_FLOWER_GROW, BLOCK_COMPARATOR_CLICK, BLOCK_COMPOSTER_EMPTY, BLOCK_COMPOSTER_FILL, BLOCK_COMPOSTER_FILL_SUCCESS, BLOCK_COMPOSTER_READY, BLOCK_CONDUIT_ACTIVATE, BLOCK_CONDUIT_AMBIENT, BLOCK_CONDUIT_AMBIENT_SHORT, BLOCK_CONDUIT_ATTACK_TARGET, BLOCK_CONDUIT_DEACTIVATE, BLOCK_COPPER_BREAK, BLOCK_COPPER_BULB_BREAK, BLOCK_COPPER_BULB_FALL, BLOCK_COPPER_BULB_HIT, BLOCK_COPPER_BULB_PLACE, BLOCK_COPPER_BULB_STEP, BLOCK_COPPER_BULB_TURN_OFF, BLOCK_COPPER_BULB_TURN_ON, BLOCK_COPPER_DOOR_CLOSE, BLOCK_COPPER_DOOR_OPEN, BLOCK_COPPER_FALL, BLOCK_COPPER_GRATE_BREAK, BLOCK_COPPER_GRATE_FALL, BLOCK_COPPER_GRATE_HIT, BLOCK_COPPER_GRATE_PLACE, BLOCK_COPPER_GRATE_STEP, BLOCK_COPPER_HIT, BLOCK_COPPER_PLACE, BLOCK_COPPER_STEP, BLOCK_COPPER_TRAPDOOR_CLOSE, BLOCK_COPPER_TRAPDOOR_OPEN, BLOCK_CORAL_BLOCK_BREAK, BLOCK_CORAL_BLOCK_FALL, BLOCK_CORAL_BLOCK_HIT, BLOCK_CORAL_BLOCK_PLACE, BLOCK_CORAL_BLOCK_STEP, BLOCK_CRAFTER_CRAFT, BLOCK_CRAFTER_FAIL, BLOCK_CROP_BREAK, BLOCK_DECORATED_POT_BREAK, BLOCK_DECORATED_POT_FALL, BLOCK_DECORATED_POT_HIT, BLOCK_DECORATED_POT_INSERT, BLOCK_DECORATED_POT_INSERT_FAIL, BLOCK_DECORATED_POT_PLACE, BLOCK_DECORATED_POT_SHATTER, BLOCK_DECORATED_POT_STEP, BLOCK_DEEPSLATE_BREAK, BLOCK_DEEPSLATE_BRICKS_BREAK, BLOCK_DEEPSLATE_BRICKS_FALL, BLOCK_DEEPSLATE_BRICKS_HIT, BLOCK_DEEPSLATE_BRICKS_PLACE, BLOCK_DEEPSLATE_BRICKS_STEP, BLOCK_DEEPSLATE_FALL, BLOCK_DEEPSLATE_HIT, BLOCK_DEEPSLATE_PLACE, BLOCK_DEEPSLATE_STEP, BLOCK_DEEPSLATE_TILES_BREAK, BLOCK_DEEPSLATE_TILES_FALL, BLOCK_DEEPSLATE_TILES_HIT, BLOCK_DEEPSLATE_TILES_PLACE, BLOCK_DEEPSLATE_TILES_STEP, BLOCK_DISPENSER_DISPENSE, BLOCK_DISPENSER_FAIL, BLOCK_DISPENSER_LAUNCH, BLOCK_DRIPSTONE_BLOCK_BREAK, BLOCK_DRIPSTONE_BLOCK_FALL, BLOCK_DRIPSTONE_BLOCK_HIT, BLOCK_DRIPSTONE_BLOCK_PLACE, BLOCK_DRIPSTONE_BLOCK_STEP, BLOCK_ENCHANTMENT_TABLE_USE, BLOCK_ENDER_CHEST_CLOSE, BLOCK_ENDER_CHEST_OPEN, BLOCK_END_GATEWAY_SPAWN, BLOCK_END_PORTAL_FRAME_FILL, BLOCK_END_PORTAL_SPAWN, BLOCK_FENCE_GATE_CLOSE, BLOCK_FENCE_GATE_OPEN, BLOCK_FIRE_AMBIENT, BLOCK_FIRE_EXTINGUISH, BLOCK_FLOWERING_AZALEA_BREAK, BLOCK_FLOWERING_AZALEA_FALL, BLOCK_FLOWERING_AZALEA_HIT, BLOCK_FLOWERING_AZALEA_PLACE, BLOCK_FLOWERING_AZALEA_STEP, BLOCK_FROGLIGHT_BREAK, BLOCK_FROGLIGHT_FALL, BLOCK_FROGLIGHT_HIT, BLOCK_FROGLIGHT_PLACE, BLOCK_FROGLIGHT_STEP, BLOCK_FROGSPAWN_BREAK, BLOCK_FROGSPAWN_FALL, BLOCK_FROGSPAWN_HATCH, BLOCK_FROGSPAWN_HIT, BLOCK_FROGSPAWN_PLACE, BLOCK_FROGSPAWN_STEP, BLOCK_FUNGUS_BREAK, BLOCK_FUNGUS_FALL, BLOCK_FUNGUS_HIT, BLOCK_FUNGUS_PLACE, BLOCK_FUNGUS_STEP, BLOCK_FURNACE_FIRE_CRACKLE, BLOCK_GILDED_BLACKSTONE_BREAK, BLOCK_GILDED_BLACKSTONE_FALL, BLOCK_GILDED_BLACKSTONE_HIT, BLOCK_GILDED_BLACKSTONE_PLACE, BLOCK_GILDED_BLACKSTONE_STEP, BLOCK_GLASS_BREAK, BLOCK_GLASS_FALL, BLOCK_GLASS_HIT, BLOCK_GLASS_PLACE, BLOCK_GLASS_STEP, BLOCK_GRASS_BREAK, BLOCK_GRASS_FALL, BLOCK_GRASS_HIT, BLOCK_GRASS_PLACE, BLOCK_GRASS_STEP, BLOCK_GRAVEL_BREAK, BLOCK_GRAVEL_FALL, BLOCK_GRAVEL_HIT, BLOCK_GRAVEL_PLACE, BLOCK_GRAVEL_STEP, BLOCK_GRINDSTONE_USE, BLOCK_GROWING_PLANT_CROP, BLOCK_HANGING_ROOTS_BREAK, BLOCK_HANGING_ROOTS_FALL, BLOCK_HANGING_ROOTS_HIT, BLOCK_HANGING_ROOTS_PLACE, BLOCK_HANGING_ROOTS_STEP, BLOCK_HANGING_SIGN_BREAK, BLOCK_HANGING_SIGN_FALL, BLOCK_HANGING_SIGN_HIT, BLOCK_HANGING_SIGN_PLACE, BLOCK_HANGING_SIGN_STEP, BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL, BLOCK_HONEY_BLOCK_BREAK, BLOCK_HONEY_BLOCK_FALL, BLOCK_HONEY_BLOCK_HIT, BLOCK_HONEY_BLOCK_PLACE, BLOCK_HONEY_BLOCK_SLIDE, BLOCK_HONEY_BLOCK_STEP, BLOCK_IRON_DOOR_CLOSE, BLOCK_IRON_DOOR_OPEN, BLOCK_IRON_TRAPDOOR_CLOSE, BLOCK_IRON_TRAPDOOR_OPEN, BLOCK_LADDER_BREAK, BLOCK_LADDER_FALL, BLOCK_LADDER_HIT, BLOCK_LADDER_PLACE, BLOCK_LADDER_STEP, BLOCK_LANTERN_BREAK, BLOCK_LANTERN_FALL, BLOCK_LANTERN_HIT, BLOCK_LANTERN_PLACE, BLOCK_LANTERN_STEP, BLOCK_LARGE_AMETHYST_BUD_BREAK, BLOCK_LARGE_AMETHYST_BUD_PLACE, BLOCK_LAVA_AMBIENT, BLOCK_LAVA_EXTINGUISH, BLOCK_LAVA_POP, BLOCK_LEVER_CLICK, BLOCK_LILY_PAD_PLACE, BLOCK_LODESTONE_BREAK, BLOCK_LODESTONE_FALL, BLOCK_LODESTONE_HIT, BLOCK_LODESTONE_PLACE, BLOCK_LODESTONE_STEP, BLOCK_MANGROVE_ROOTS_BREAK, BLOCK_MANGROVE_ROOTS_FALL, BLOCK_MANGROVE_ROOTS_HIT, BLOCK_MANGROVE_ROOTS_PLACE, BLOCK_MANGROVE_ROOTS_STEP, BLOCK_MEDIUM_AMETHYST_BUD_BREAK, BLOCK_MEDIUM_AMETHYST_BUD_PLACE, BLOCK_METAL_BREAK, BLOCK_METAL_FALL, BLOCK_METAL_HIT, BLOCK_METAL_PLACE, BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, BLOCK_METAL_PRESSURE_PLATE_CLICK_ON, BLOCK_METAL_STEP, BLOCK_MOSS_BREAK, BLOCK_MOSS_CARPET_BREAK, BLOCK_MOSS_CARPET_FALL, BLOCK_MOSS_CARPET_HIT, BLOCK_MOSS_CARPET_PLACE, BLOCK_MOSS_CARPET_STEP, BLOCK_MOSS_FALL, BLOCK_MOSS_HIT, BLOCK_MOSS_PLACE, BLOCK_MOSS_STEP, BLOCK_MUDDY_MANGROVE_ROOTS_BREAK, BLOCK_MUDDY_MANGROVE_ROOTS_FALL, BLOCK_MUDDY_MANGROVE_ROOTS_HIT, BLOCK_MUDDY_MANGROVE_ROOTS_PLACE, BLOCK_MUDDY_MANGROVE_ROOTS_STEP, BLOCK_MUD_BREAK, BLOCK_MUD_BRICKS_BREAK, BLOCK_MUD_BRICKS_FALL, BLOCK_MUD_BRICKS_HIT, BLOCK_MUD_BRICKS_PLACE, BLOCK_MUD_BRICKS_STEP, BLOCK_MUD_FALL, BLOCK_MUD_HIT, BLOCK_MUD_PLACE, BLOCK_MUD_STEP, BLOCK_NETHERITE_BLOCK_BREAK, BLOCK_NETHERITE_BLOCK_FALL, BLOCK_NETHERITE_BLOCK_HIT, BLOCK_NETHERITE_BLOCK_PLACE, BLOCK_NETHERITE_BLOCK_STEP, BLOCK_NETHERRACK_BREAK, BLOCK_NETHERRACK_FALL, BLOCK_NETHERRACK_HIT, BLOCK_NETHERRACK_PLACE, BLOCK_NETHERRACK_STEP, BLOCK_NETHER_BRICKS_BREAK, BLOCK_NETHER_BRICKS_FALL, BLOCK_NETHER_BRICKS_HIT, BLOCK_NETHER_BRICKS_PLACE, BLOCK_NETHER_BRICKS_STEP, BLOCK_NETHER_GOLD_ORE_BREAK, BLOCK_NETHER_GOLD_ORE_FALL, BLOCK_NETHER_GOLD_ORE_HIT, BLOCK_NETHER_GOLD_ORE_PLACE, BLOCK_NETHER_GOLD_ORE_STEP, BLOCK_NETHER_ORE_BREAK, BLOCK_NETHER_ORE_FALL, BLOCK_NETHER_ORE_HIT, BLOCK_NETHER_ORE_PLACE, BLOCK_NETHER_ORE_STEP, BLOCK_NETHER_SPROUTS_BREAK, BLOCK_NETHER_SPROUTS_FALL, BLOCK_NETHER_SPROUTS_HIT, BLOCK_NETHER_SPROUTS_PLACE, BLOCK_NETHER_SPROUTS_STEP, BLOCK_NETHER_WART_BREAK, BLOCK_NETHER_WOOD_BREAK, BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF, BLOCK_NETHER_WOOD_BUTTON_CLICK_ON, BLOCK_NETHER_WOOD_DOOR_CLOSE, BLOCK_NETHER_WOOD_DOOR_OPEN, BLOCK_NETHER_WOOD_FALL, BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE, BLOCK_NETHER_WOOD_FENCE_GATE_OPEN, BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK, BLOCK_NETHER_WOOD_HANGING_SIGN_FALL, BLOCK_NETHER_WOOD_HANGING_SIGN_HIT, BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE, BLOCK_NETHER_WOOD_HANGING_SIGN_STEP, BLOCK_NETHER_WOOD_HIT, BLOCK_NETHER_WOOD_PLACE, BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF, BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON, BLOCK_NETHER_WOOD_STEP, BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE, BLOCK_NETHER_WOOD_TRAPDOOR_OPEN, BLOCK_NOTE_BLOCK_BANJO, BLOCK_NOTE_BLOCK_BASEDRUM, BLOCK_NOTE_BLOCK_BASS, BLOCK_NOTE_BLOCK_BELL, BLOCK_NOTE_BLOCK_BIT, BLOCK_NOTE_BLOCK_CHIME, BLOCK_NOTE_BLOCK_COW_BELL, BLOCK_NOTE_BLOCK_DIDGERIDOO, BLOCK_NOTE_BLOCK_FLUTE, BLOCK_NOTE_BLOCK_GUITAR, BLOCK_NOTE_BLOCK_HARP, BLOCK_NOTE_BLOCK_HAT, BLOCK_NOTE_BLOCK_IMITATE_CREEPER, BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON, BLOCK_NOTE_BLOCK_IMITATE_PIGLIN, BLOCK_NOTE_BLOCK_IMITATE_SKELETON, BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON, BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE, BLOCK_NOTE_BLOCK_IRON_XYLOPHONE, BLOCK_NOTE_BLOCK_PLING, BLOCK_NOTE_BLOCK_SNARE, BLOCK_NOTE_BLOCK_XYLOPHONE, BLOCK_NYLIUM_BREAK, BLOCK_NYLIUM_FALL, BLOCK_NYLIUM_HIT, BLOCK_NYLIUM_PLACE, BLOCK_NYLIUM_STEP, BLOCK_PACKED_MUD_BREAK, BLOCK_PACKED_MUD_FALL, BLOCK_PACKED_MUD_HIT, BLOCK_PACKED_MUD_PLACE, BLOCK_PACKED_MUD_STEP, BLOCK_PINK_PETALS_BREAK, BLOCK_PINK_PETALS_FALL, BLOCK_PINK_PETALS_HIT, BLOCK_PINK_PETALS_PLACE, BLOCK_PINK_PETALS_STEP, BLOCK_PISTON_CONTRACT, BLOCK_PISTON_EXTEND, BLOCK_POINTED_DRIPSTONE_BREAK, BLOCK_POINTED_DRIPSTONE_DRIP_LAVA, BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON, BLOCK_POINTED_DRIPSTONE_DRIP_WATER, BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON, BLOCK_POINTED_DRIPSTONE_FALL, BLOCK_POINTED_DRIPSTONE_HIT, BLOCK_POINTED_DRIPSTONE_LAND, BLOCK_POINTED_DRIPSTONE_PLACE, BLOCK_POINTED_DRIPSTONE_STEP, BLOCK_POLISHED_DEEPSLATE_BREAK, BLOCK_POLISHED_DEEPSLATE_FALL, BLOCK_POLISHED_DEEPSLATE_HIT, BLOCK_POLISHED_DEEPSLATE_PLACE, BLOCK_POLISHED_DEEPSLATE_STEP, BLOCK_POLISHED_TUFF_BREAK, BLOCK_POLISHED_TUFF_FALL, BLOCK_POLISHED_TUFF_HIT, BLOCK_POLISHED_TUFF_PLACE, BLOCK_POLISHED_TUFF_STEP, BLOCK_PORTAL_AMBIENT, BLOCK_PORTAL_TRAVEL, BLOCK_PORTAL_TRIGGER, BLOCK_POWDER_SNOW_BREAK, BLOCK_POWDER_SNOW_FALL, BLOCK_POWDER_SNOW_HIT, BLOCK_POWDER_SNOW_PLACE, BLOCK_POWDER_SNOW_STEP, BLOCK_PUMPKIN_CARVE, BLOCK_REDSTONE_TORCH_BURNOUT, BLOCK_RESPAWN_ANCHOR_AMBIENT, BLOCK_RESPAWN_ANCHOR_CHARGE, BLOCK_RESPAWN_ANCHOR_DEPLETE, BLOCK_RESPAWN_ANCHOR_SET_SPAWN, BLOCK_ROOTED_DIRT_BREAK, BLOCK_ROOTED_DIRT_FALL, BLOCK_ROOTED_DIRT_HIT, BLOCK_ROOTED_DIRT_PLACE, BLOCK_ROOTED_DIRT_STEP, BLOCK_ROOTS_BREAK, BLOCK_ROOTS_FALL, BLOCK_ROOTS_HIT, BLOCK_ROOTS_PLACE, BLOCK_ROOTS_STEP, BLOCK_SAND_BREAK, BLOCK_SAND_FALL, BLOCK_SAND_HIT, BLOCK_SAND_PLACE, BLOCK_SAND_STEP, BLOCK_SCAFFOLDING_BREAK, BLOCK_SCAFFOLDING_FALL, BLOCK_SCAFFOLDING_HIT, BLOCK_SCAFFOLDING_PLACE, BLOCK_SCAFFOLDING_STEP, BLOCK_SCULK_BREAK, BLOCK_SCULK_CATALYST_BLOOM, BLOCK_SCULK_CATALYST_BREAK, BLOCK_SCULK_CATALYST_FALL, BLOCK_SCULK_CATALYST_HIT, BLOCK_SCULK_CATALYST_PLACE, BLOCK_SCULK_CATALYST_STEP, BLOCK_SCULK_CHARGE, BLOCK_SCULK_FALL, BLOCK_SCULK_HIT, BLOCK_SCULK_PLACE, BLOCK_SCULK_SENSOR_BREAK, BLOCK_SCULK_SENSOR_CLICKING, BLOCK_SCULK_SENSOR_CLICKING_STOP, BLOCK_SCULK_SENSOR_FALL, BLOCK_SCULK_SENSOR_HIT, BLOCK_SCULK_SENSOR_PLACE, BLOCK_SCULK_SENSOR_STEP, BLOCK_SCULK_SHRIEKER_BREAK, BLOCK_SCULK_SHRIEKER_FALL, BLOCK_SCULK_SHRIEKER_HIT, BLOCK_SCULK_SHRIEKER_PLACE, BLOCK_SCULK_SHRIEKER_SHRIEK, BLOCK_SCULK_SHRIEKER_STEP, BLOCK_SCULK_SPREAD, BLOCK_SCULK_STEP, BLOCK_SCULK_VEIN_BREAK, BLOCK_SCULK_VEIN_FALL, BLOCK_SCULK_VEIN_HIT, BLOCK_SCULK_VEIN_PLACE, BLOCK_SCULK_VEIN_STEP, BLOCK_SHROOMLIGHT_BREAK, BLOCK_SHROOMLIGHT_FALL, BLOCK_SHROOMLIGHT_HIT, BLOCK_SHROOMLIGHT_PLACE, BLOCK_SHROOMLIGHT_STEP, BLOCK_SHULKER_BOX_CLOSE, BLOCK_SHULKER_BOX_OPEN, BLOCK_SIGN_WAXED_INTERACT_FAIL, BLOCK_SLIME_BLOCK_BREAK, BLOCK_SLIME_BLOCK_FALL, BLOCK_SLIME_BLOCK_HIT, BLOCK_SLIME_BLOCK_PLACE, BLOCK_SLIME_BLOCK_STEP, BLOCK_SMALL_AMETHYST_BUD_BREAK, BLOCK_SMALL_AMETHYST_BUD_PLACE, BLOCK_SMALL_DRIPLEAF_BREAK, BLOCK_SMALL_DRIPLEAF_FALL, BLOCK_SMALL_DRIPLEAF_HIT, BLOCK_SMALL_DRIPLEAF_PLACE, BLOCK_SMALL_DRIPLEAF_STEP, BLOCK_SMITHING_TABLE_USE, BLOCK_SMOKER_SMOKE, BLOCK_SNIFFER_EGG_CRACK, BLOCK_SNIFFER_EGG_HATCH, BLOCK_SNIFFER_EGG_PLOP, BLOCK_SNOW_BREAK, BLOCK_SNOW_FALL, BLOCK_SNOW_HIT, BLOCK_SNOW_PLACE, BLOCK_SNOW_STEP, BLOCK_SOUL_SAND_BREAK, BLOCK_SOUL_SAND_FALL, BLOCK_SOUL_SAND_HIT, BLOCK_SOUL_SAND_PLACE, BLOCK_SOUL_SAND_STEP, BLOCK_SOUL_SOIL_BREAK, BLOCK_SOUL_SOIL_FALL, BLOCK_SOUL_SOIL_HIT, BLOCK_SOUL_SOIL_PLACE, BLOCK_SOUL_SOIL_STEP, BLOCK_SPONGE_ABSORB, BLOCK_SPONGE_BREAK, BLOCK_SPONGE_FALL, BLOCK_SPONGE_HIT, BLOCK_SPONGE_PLACE, BLOCK_SPONGE_STEP, BLOCK_SPORE_BLOSSOM_BREAK, BLOCK_SPORE_BLOSSOM_FALL, BLOCK_SPORE_BLOSSOM_HIT, BLOCK_SPORE_BLOSSOM_PLACE, BLOCK_SPORE_BLOSSOM_STEP, BLOCK_STEM_BREAK, BLOCK_STEM_FALL, BLOCK_STEM_HIT, BLOCK_STEM_PLACE, BLOCK_STEM_STEP, BLOCK_STONE_BREAK, BLOCK_STONE_BUTTON_CLICK_OFF, BLOCK_STONE_BUTTON_CLICK_ON, BLOCK_STONE_FALL, BLOCK_STONE_HIT, BLOCK_STONE_PLACE, BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF, BLOCK_STONE_PRESSURE_PLATE_CLICK_ON, BLOCK_STONE_STEP, BLOCK_SUSPICIOUS_GRAVEL_BREAK, BLOCK_SUSPICIOUS_GRAVEL_FALL, BLOCK_SUSPICIOUS_GRAVEL_HIT, BLOCK_SUSPICIOUS_GRAVEL_PLACE, BLOCK_SUSPICIOUS_GRAVEL_STEP, BLOCK_SUSPICIOUS_SAND_BREAK, BLOCK_SUSPICIOUS_SAND_FALL, BLOCK_SUSPICIOUS_SAND_HIT, BLOCK_SUSPICIOUS_SAND_PLACE, BLOCK_SUSPICIOUS_SAND_STEP, BLOCK_SWEET_BERRY_BUSH_BREAK, BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES, BLOCK_SWEET_BERRY_BUSH_PLACE, BLOCK_TRIAL_SPAWNER_AMBIENT, BLOCK_TRIAL_SPAWNER_BREAK, BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER, BLOCK_TRIAL_SPAWNER_DETECT_PLAYER, BLOCK_TRIAL_SPAWNER_EJECT_ITEM, BLOCK_TRIAL_SPAWNER_FALL, BLOCK_TRIAL_SPAWNER_HIT, BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER, BLOCK_TRIAL_SPAWNER_PLACE, BLOCK_TRIAL_SPAWNER_SPAWN_MOB, BLOCK_TRIAL_SPAWNER_STEP, BLOCK_TRIPWIRE_ATTACH, BLOCK_TRIPWIRE_CLICK_OFF, BLOCK_TRIPWIRE_CLICK_ON, BLOCK_TRIPWIRE_DETACH, BLOCK_TUFF_BREAK, BLOCK_TUFF_BRICKS_BREAK, BLOCK_TUFF_BRICKS_FALL, BLOCK_TUFF_BRICKS_HIT, BLOCK_TUFF_BRICKS_PLACE, BLOCK_TUFF_BRICKS_STEP, BLOCK_TUFF_FALL, BLOCK_TUFF_HIT, BLOCK_TUFF_PLACE, BLOCK_TUFF_STEP, BLOCK_VINE_BREAK, BLOCK_VINE_FALL, BLOCK_VINE_HIT, BLOCK_VINE_PLACE, BLOCK_VINE_STEP, BLOCK_WART_BLOCK_BREAK, BLOCK_WART_BLOCK_FALL, BLOCK_WART_BLOCK_HIT, BLOCK_WART_BLOCK_PLACE, BLOCK_WART_BLOCK_STEP, BLOCK_WATER_AMBIENT, BLOCK_WEEPING_VINES_BREAK, BLOCK_WEEPING_VINES_FALL, BLOCK_WEEPING_VINES_HIT, BLOCK_WEEPING_VINES_PLACE, BLOCK_WEEPING_VINES_STEP, BLOCK_WET_GRASS_BREAK, BLOCK_WET_GRASS_FALL, BLOCK_WET_GRASS_HIT, BLOCK_WET_GRASS_PLACE, BLOCK_WET_GRASS_STEP, BLOCK_WET_SPONGE_BREAK, BLOCK_WET_SPONGE_FALL, BLOCK_WET_SPONGE_HIT, BLOCK_WET_SPONGE_PLACE, BLOCK_WET_SPONGE_STEP, BLOCK_WOODEN_BUTTON_CLICK_OFF, BLOCK_WOODEN_BUTTON_CLICK_ON, BLOCK_WOODEN_DOOR_CLOSE, BLOCK_WOODEN_DOOR_OPEN, BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF, BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON, BLOCK_WOODEN_TRAPDOOR_CLOSE, BLOCK_WOODEN_TRAPDOOR_OPEN, BLOCK_WOOD_BREAK, BLOCK_WOOD_FALL, BLOCK_WOOD_HIT, BLOCK_WOOD_PLACE, BLOCK_WOOD_STEP, BLOCK_WOOL_BREAK, BLOCK_WOOL_FALL, BLOCK_WOOL_HIT, BLOCK_WOOL_PLACE, BLOCK_WOOL_STEP, ENCHANT_THORNS_HIT, ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM, ENTITY_ALLAY_AMBIENT_WITH_ITEM, ENTITY_ALLAY_DEATH, ENTITY_ALLAY_HURT, ENTITY_ALLAY_ITEM_GIVEN, ENTITY_ALLAY_ITEM_TAKEN, ENTITY_ALLAY_ITEM_THROWN, ENTITY_ARMOR_STAND_BREAK, ENTITY_ARMOR_STAND_FALL, ENTITY_ARMOR_STAND_HIT, ENTITY_ARMOR_STAND_PLACE, ENTITY_ARROW_HIT, ENTITY_ARROW_HIT_PLAYER, ENTITY_ARROW_SHOOT, ENTITY_AXOLOTL_ATTACK, ENTITY_AXOLOTL_DEATH, ENTITY_AXOLOTL_HURT, ENTITY_AXOLOTL_IDLE_AIR, ENTITY_AXOLOTL_IDLE_WATER, ENTITY_AXOLOTL_SPLASH, ENTITY_AXOLOTL_SWIM, ENTITY_BAT_AMBIENT, ENTITY_BAT_DEATH, ENTITY_BAT_HURT, ENTITY_BAT_LOOP, ENTITY_BAT_TAKEOFF, ENTITY_BEE_DEATH, ENTITY_BEE_HURT, ENTITY_BEE_LOOP, ENTITY_BEE_LOOP_AGGRESSIVE, ENTITY_BEE_POLLINATE, ENTITY_BEE_STING, ENTITY_BLAZE_AMBIENT, ENTITY_BLAZE_BURN, ENTITY_BLAZE_DEATH, ENTITY_BLAZE_HURT, ENTITY_BLAZE_SHOOT, ENTITY_BOAT_PADDLE_LAND, ENTITY_BOAT_PADDLE_WATER, ENTITY_BREEZE_DEATH, ENTITY_BREEZE_HURT, ENTITY_BREEZE_IDLE_AIR, ENTITY_BREEZE_IDLE_GROUND, ENTITY_BREEZE_INHALE, ENTITY_BREEZE_JUMP, ENTITY_BREEZE_LAND, ENTITY_BREEZE_SHOOT, ENTITY_BREEZE_SLIDE, ENTITY_CAMEL_AMBIENT, ENTITY_CAMEL_DASH, ENTITY_CAMEL_DASH_READY, ENTITY_CAMEL_DEATH, ENTITY_CAMEL_EAT, ENTITY_CAMEL_HURT, ENTITY_CAMEL_SADDLE, ENTITY_CAMEL_SIT, ENTITY_CAMEL_STAND, ENTITY_CAMEL_STEP, ENTITY_CAMEL_STEP_SAND, ENTITY_CAT_AMBIENT, ENTITY_CAT_BEG_FOR_FOOD, ENTITY_CAT_DEATH, ENTITY_CAT_EAT, ENTITY_CAT_HISS, ENTITY_CAT_HURT, ENTITY_CAT_PURR, ENTITY_CAT_PURREOW, ENTITY_CAT_STRAY_AMBIENT, ENTITY_CHICKEN_AMBIENT, ENTITY_CHICKEN_DEATH, ENTITY_CHICKEN_EGG, ENTITY_CHICKEN_HURT, ENTITY_CHICKEN_STEP, ENTITY_COD_AMBIENT, ENTITY_COD_DEATH, ENTITY_COD_FLOP, ENTITY_COD_HURT, ENTITY_COW_AMBIENT, ENTITY_COW_DEATH, ENTITY_COW_HURT, ENTITY_COW_MILK, ENTITY_COW_STEP, ENTITY_CREEPER_DEATH, ENTITY_CREEPER_HURT, ENTITY_CREEPER_PRIMED, ENTITY_DOLPHIN_AMBIENT, ENTITY_DOLPHIN_AMBIENT_WATER, ENTITY_DOLPHIN_ATTACK, ENTITY_DOLPHIN_DEATH, ENTITY_DOLPHIN_EAT, ENTITY_DOLPHIN_HURT, ENTITY_DOLPHIN_JUMP, ENTITY_DOLPHIN_PLAY, ENTITY_DOLPHIN_SPLASH, ENTITY_DOLPHIN_SWIM, ENTITY_DONKEY_AMBIENT, ENTITY_DONKEY_ANGRY, ENTITY_DONKEY_CHEST, ENTITY_DONKEY_DEATH, ENTITY_DONKEY_EAT, ENTITY_DONKEY_HURT, ENTITY_DRAGON_FIREBALL_EXPLODE, ENTITY_DROWNED_AMBIENT, ENTITY_DROWNED_AMBIENT_WATER, ENTITY_DROWNED_DEATH, ENTITY_DROWNED_DEATH_WATER, ENTITY_DROWNED_HURT, ENTITY_DROWNED_HURT_WATER, ENTITY_DROWNED_SHOOT, ENTITY_DROWNED_STEP, ENTITY_DROWNED_SWIM, ENTITY_EGG_THROW, ENTITY_ELDER_GUARDIAN_AMBIENT, ENTITY_ELDER_GUARDIAN_AMBIENT_LAND, ENTITY_ELDER_GUARDIAN_CURSE, ENTITY_ELDER_GUARDIAN_DEATH, ENTITY_ELDER_GUARDIAN_DEATH_LAND, ENTITY_ELDER_GUARDIAN_FLOP, ENTITY_ELDER_GUARDIAN_HURT, ENTITY_ELDER_GUARDIAN_HURT_LAND, ENTITY_ENDERMAN_AMBIENT, ENTITY_ENDERMAN_DEATH, ENTITY_ENDERMAN_HURT, ENTITY_ENDERMAN_SCREAM, ENTITY_ENDERMAN_STARE, ENTITY_ENDERMAN_TELEPORT, ENTITY_ENDERMITE_AMBIENT, ENTITY_ENDERMITE_DEATH, ENTITY_ENDERMITE_HURT, ENTITY_ENDERMITE_STEP, ENTITY_ENDER_DRAGON_AMBIENT, ENTITY_ENDER_DRAGON_DEATH, ENTITY_ENDER_DRAGON_FLAP, ENTITY_ENDER_DRAGON_GROWL, ENTITY_ENDER_DRAGON_HURT, ENTITY_ENDER_DRAGON_SHOOT, ENTITY_ENDER_EYE_DEATH, ENTITY_ENDER_EYE_LAUNCH, ENTITY_ENDER_PEARL_THROW, ENTITY_EVOKER_AMBIENT, ENTITY_EVOKER_CAST_SPELL, ENTITY_EVOKER_CELEBRATE, ENTITY_EVOKER_DEATH, ENTITY_EVOKER_FANGS_ATTACK, ENTITY_EVOKER_HURT, ENTITY_EVOKER_PREPARE_ATTACK, ENTITY_EVOKER_PREPARE_SUMMON, ENTITY_EVOKER_PREPARE_WOLOLO, ENTITY_EXPERIENCE_BOTTLE_THROW, ENTITY_EXPERIENCE_ORB_PICKUP, ENTITY_FIREWORK_ROCKET_BLAST, ENTITY_FIREWORK_ROCKET_BLAST_FAR, ENTITY_FIREWORK_ROCKET_LARGE_BLAST, ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR, ENTITY_FIREWORK_ROCKET_LAUNCH, ENTITY_FIREWORK_ROCKET_SHOOT, ENTITY_FIREWORK_ROCKET_TWINKLE, ENTITY_FIREWORK_ROCKET_TWINKLE_FAR, ENTITY_FISHING_BOBBER_RETRIEVE, ENTITY_FISHING_BOBBER_SPLASH, ENTITY_FISHING_BOBBER_THROW, ENTITY_FISH_SWIM, ENTITY_FOX_AGGRO, ENTITY_FOX_AMBIENT, ENTITY_FOX_BITE, ENTITY_FOX_DEATH, ENTITY_FOX_EAT, ENTITY_FOX_HURT, ENTITY_FOX_SCREECH, ENTITY_FOX_SLEEP, ENTITY_FOX_SNIFF, ENTITY_FOX_SPIT, ENTITY_FOX_TELEPORT, ENTITY_FROG_AMBIENT, ENTITY_FROG_DEATH, ENTITY_FROG_EAT, ENTITY_FROG_HURT, ENTITY_FROG_LAY_SPAWN, ENTITY_FROG_LONG_JUMP, ENTITY_FROG_STEP, ENTITY_FROG_TONGUE, ENTITY_GENERIC_BIG_FALL, ENTITY_GENERIC_BURN, ENTITY_GENERIC_DEATH, ENTITY_GENERIC_DRINK, ENTITY_GENERIC_EAT, ENTITY_GENERIC_EXPLODE, ENTITY_GENERIC_EXTINGUISH_FIRE, ENTITY_GENERIC_HURT, ENTITY_GENERIC_SMALL_FALL, ENTITY_GENERIC_SPLASH, ENTITY_GENERIC_SWIM, BLOCK_COBWEB_BREAK, BLOCK_COBWEB_FALL, BLOCK_COBWEB_HIT, BLOCK_COBWEB_PLACE, BLOCK_COBWEB_STEP, BLOCK_HEAVY_CORE_BREAK, BLOCK_HEAVY_CORE_FALL, BLOCK_HEAVY_CORE_HIT, BLOCK_HEAVY_CORE_PLACE, BLOCK_HEAVY_CORE_STEP, BLOCK_TRIAL_SPAWNER_ABOUT_TO_SPAWN_ITEM, BLOCK_TRIAL_SPAWNER_AMBIENT_CHARGED, BLOCK_TRIAL_SPAWNER_CHARGE_ACTIVATE, BLOCK_TRIAL_SPAWNER_SPAWN_ITEM, BLOCK_TRIAL_SPAWNER_SPAWN_ITEM_BEGIN, BLOCK_VAULT_ACTIVATE, BLOCK_VAULT_AMBIENT, BLOCK_VAULT_BREAK, BLOCK_VAULT_CLOSE_SHUTTER, BLOCK_VAULT_DEACTIVATE, BLOCK_VAULT_EJECT_ITEM, BLOCK_VAULT_FALL, BLOCK_VAULT_HIT, BLOCK_VAULT_INSERT_ITEM, BLOCK_VAULT_INSERT_ITEM_FAIL, BLOCK_VAULT_OPEN_SHUTTER, BLOCK_VAULT_PLACE, BLOCK_VAULT_STEP, BLOCK_WET_SPONGE_DRIES, ENTITY_ARMADILLO_AMBIENT, ENTITY_ARMADILLO_BRUSH, ENTITY_ARMADILLO_DEATH, ENTITY_ARMADILLO_EAT, ENTITY_ARMADILLO_HURT, ENTITY_ARMADILLO_HURT_REDUCED, ENTITY_ARMADILLO_LAND, ENTITY_ARMADILLO_PEEK, ENTITY_ARMADILLO_ROLL, ENTITY_ARMADILLO_SCUTE_DROP, ENTITY_ARMADILLO_STEP, ENTITY_ARMADILLO_UNROLL_FINISH, ENTITY_ARMADILLO_UNROLL_START, ENTITY_BOGGED_AMBIENT, ENTITY_BOGGED_DEATH, ENTITY_BOGGED_HURT, ENTITY_BOGGED_SHEAR, ENTITY_BOGGED_STEP, ENTITY_BREEZE_CHARGE, ENTITY_BREEZE_DEFLECT, ENTITY_BREEZE_WHIRL, ENTITY_BREEZE_WIND_BURST, ENTITY_DONKEY_JUMP, ENTITY_MULE_JUMP, ENTITY_PARROT_IMITATE_BOGGED, ENTITY_WIND_CHARGE_THROW, ENTITY_WIND_CHARGE_WIND_BURST, EVENT_MOB_EFFECT_BAD_OMEN, EVENT_MOB_EFFECT_RAID_OMEN, EVENT_MOB_EFFECT_TRIAL_OMEN, ITEM_ARMOR_EQUIP_WOLF, ITEM_ARMOR_UNEQUIP_WOLF, ITEM_MACE_SMASH_AIR, ITEM_MACE_SMASH_GROUND, ITEM_MACE_SMASH_GROUND_HEAVY, ITEM_OMINOUS_BOTTLE_DISPOSE, ITEM_WOLF_ARMOR_BREAK, ITEM_WOLF_ARMOR_CRACK, ITEM_WOLF_ARMOR_DAMAGE, ITEM_WOLF_ARMOR_REPAIR, ENTITY_GHAST_AMBIENT, ENTITY_GHAST_DEATH, ENTITY_GHAST_HURT, ENTITY_GHAST_SCREAM, ENTITY_GHAST_SHOOT, ENTITY_GHAST_WARN, ENTITY_GLOW_ITEM_FRAME_ADD_ITEM, ENTITY_GLOW_ITEM_FRAME_BREAK, ENTITY_GLOW_ITEM_FRAME_PLACE, ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM, ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM, ENTITY_GLOW_SQUID_AMBIENT, ENTITY_GLOW_SQUID_DEATH, ENTITY_GLOW_SQUID_HURT, ENTITY_GLOW_SQUID_SQUIRT, ENTITY_GOAT_AMBIENT, ENTITY_GOAT_DEATH, ENTITY_GOAT_EAT, ENTITY_GOAT_HORN_BREAK, ENTITY_GOAT_HURT, ENTITY_GOAT_LONG_JUMP, ENTITY_GOAT_MILK, ENTITY_GOAT_PREPARE_RAM, ENTITY_GOAT_RAM_IMPACT, ENTITY_GOAT_SCREAMING_AMBIENT, ENTITY_GOAT_SCREAMING_DEATH, ENTITY_GOAT_SCREAMING_EAT, ENTITY_GOAT_SCREAMING_HORN_BREAK, ENTITY_GOAT_SCREAMING_HURT, ENTITY_GOAT_SCREAMING_LONG_JUMP, ENTITY_GOAT_SCREAMING_MILK, ENTITY_GOAT_SCREAMING_PREPARE_RAM, ENTITY_GOAT_SCREAMING_RAM_IMPACT, ENTITY_GOAT_STEP, ENTITY_GUARDIAN_AMBIENT, ENTITY_GUARDIAN_AMBIENT_LAND, ENTITY_GUARDIAN_ATTACK, ENTITY_GUARDIAN_DEATH, ENTITY_GUARDIAN_DEATH_LAND, ENTITY_GUARDIAN_FLOP, ENTITY_GUARDIAN_HURT, ENTITY_GUARDIAN_HURT_LAND, ENTITY_HOGLIN_AMBIENT, ENTITY_HOGLIN_ANGRY, ENTITY_HOGLIN_ATTACK, ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED, ENTITY_HOGLIN_DEATH, ENTITY_HOGLIN_HURT, ENTITY_HOGLIN_RETREAT, ENTITY_HOGLIN_STEP, ENTITY_HORSE_AMBIENT, ENTITY_HORSE_ANGRY, ENTITY_HORSE_ARMOR, ENTITY_HORSE_BREATHE, ENTITY_HORSE_DEATH, ENTITY_HORSE_EAT, ENTITY_HORSE_GALLOP, ENTITY_HORSE_HURT, ENTITY_HORSE_JUMP, ENTITY_HORSE_LAND, ENTITY_HORSE_SADDLE, ENTITY_HORSE_STEP, ENTITY_HORSE_STEP_WOOD, ENTITY_HOSTILE_BIG_FALL, ENTITY_HOSTILE_DEATH, ENTITY_HOSTILE_HURT, ENTITY_HOSTILE_SMALL_FALL, ENTITY_HOSTILE_SPLASH, ENTITY_HOSTILE_SWIM, ENTITY_HUSK_AMBIENT, ENTITY_HUSK_CONVERTED_TO_ZOMBIE, ENTITY_HUSK_DEATH, ENTITY_HUSK_HURT, ENTITY_HUSK_STEP, ENTITY_ILLUSIONER_AMBIENT, ENTITY_ILLUSIONER_CAST_SPELL, ENTITY_ILLUSIONER_DEATH, ENTITY_ILLUSIONER_HURT, ENTITY_ILLUSIONER_MIRROR_MOVE, ENTITY_ILLUSIONER_PREPARE_BLINDNESS, ENTITY_ILLUSIONER_PREPARE_MIRROR, ENTITY_IRON_GOLEM_ATTACK, ENTITY_IRON_GOLEM_DAMAGE, ENTITY_IRON_GOLEM_DEATH, ENTITY_IRON_GOLEM_HURT, ENTITY_IRON_GOLEM_REPAIR, ENTITY_IRON_GOLEM_STEP, ENTITY_ITEM_BREAK, ENTITY_ITEM_FRAME_ADD_ITEM, ENTITY_ITEM_FRAME_BREAK, ENTITY_ITEM_FRAME_PLACE, ENTITY_ITEM_FRAME_REMOVE_ITEM, ENTITY_ITEM_FRAME_ROTATE_ITEM, ENTITY_ITEM_PICKUP, ENTITY_LEASH_KNOT_BREAK, ENTITY_LEASH_KNOT_PLACE, ENTITY_LIGHTNING_BOLT_IMPACT, ENTITY_LIGHTNING_BOLT_THUNDER, ENTITY_LINGERING_POTION_THROW, ENTITY_LLAMA_AMBIENT, ENTITY_LLAMA_ANGRY, ENTITY_LLAMA_CHEST, ENTITY_LLAMA_DEATH, ENTITY_LLAMA_EAT, ENTITY_LLAMA_HURT, ENTITY_LLAMA_SPIT, ENTITY_LLAMA_STEP, ENTITY_LLAMA_SWAG, ENTITY_MAGMA_CUBE_DEATH, ENTITY_MAGMA_CUBE_DEATH_SMALL, ENTITY_MAGMA_CUBE_HURT, ENTITY_MAGMA_CUBE_HURT_SMALL, ENTITY_MAGMA_CUBE_JUMP, ENTITY_MAGMA_CUBE_SQUISH, ENTITY_MAGMA_CUBE_SQUISH_SMALL, ENTITY_MINECART_INSIDE, ENTITY_MINECART_INSIDE_UNDERWATER, ENTITY_MINECART_RIDING, ENTITY_MOOSHROOM_CONVERT, ENTITY_MOOSHROOM_EAT, ENTITY_MOOSHROOM_MILK, ENTITY_MOOSHROOM_SHEAR, ENTITY_MOOSHROOM_SUSPICIOUS_MILK, ENTITY_MULE_AMBIENT, ENTITY_MULE_ANGRY, ENTITY_MULE_CHEST, ENTITY_MULE_DEATH, ENTITY_MULE_EAT, ENTITY_MULE_HURT, ENTITY_OCELOT_AMBIENT, ENTITY_OCELOT_DEATH, ENTITY_OCELOT_HURT, ENTITY_PAINTING_BREAK, ENTITY_PAINTING_PLACE, ENTITY_PANDA_AGGRESSIVE_AMBIENT, ENTITY_PANDA_AMBIENT, ENTITY_PANDA_BITE, ENTITY_PANDA_CANT_BREED, ENTITY_PANDA_DEATH, ENTITY_PANDA_EAT, ENTITY_PANDA_HURT, ENTITY_PANDA_PRE_SNEEZE, ENTITY_PANDA_SNEEZE, ENTITY_PANDA_STEP, ENTITY_PANDA_WORRIED_AMBIENT, ENTITY_PARROT_AMBIENT, ENTITY_PARROT_DEATH, ENTITY_PARROT_EAT, ENTITY_PARROT_FLY, ENTITY_PARROT_HURT, ENTITY_PARROT_IMITATE_BLAZE, ENTITY_PARROT_IMITATE_BREEZE, ENTITY_PARROT_IMITATE_CREEPER, ENTITY_PARROT_IMITATE_DROWNED, ENTITY_PARROT_IMITATE_ELDER_GUARDIAN, ENTITY_PARROT_IMITATE_ENDERMAN, ENTITY_PARROT_IMITATE_ENDERMITE, ENTITY_PARROT_IMITATE_ENDER_DRAGON, ENTITY_PARROT_IMITATE_EVOKER, ENTITY_PARROT_IMITATE_GHAST, ENTITY_PARROT_IMITATE_GUARDIAN, ENTITY_PARROT_IMITATE_HOGLIN, ENTITY_PARROT_IMITATE_HUSK, ENTITY_PARROT_IMITATE_ILLUSIONER, ENTITY_PARROT_IMITATE_MAGMA_CUBE, ENTITY_PARROT_IMITATE_PHANTOM, ENTITY_PARROT_IMITATE_PIGLIN, ENTITY_PARROT_IMITATE_PIGLIN_BRUTE, ENTITY_PARROT_IMITATE_PILLAGER, ENTITY_PARROT_IMITATE_POLAR_BEAR, ENTITY_PARROT_IMITATE_RAVAGER, ENTITY_PARROT_IMITATE_SHULKER, ENTITY_PARROT_IMITATE_SILVERFISH, ENTITY_PARROT_IMITATE_SKELETON, ENTITY_PARROT_IMITATE_SLIME, ENTITY_PARROT_IMITATE_SPIDER, ENTITY_PARROT_IMITATE_STRAY, ENTITY_PARROT_IMITATE_VEX, ENTITY_PARROT_IMITATE_VINDICATOR, ENTITY_PARROT_IMITATE_WARDEN, ENTITY_PARROT_IMITATE_WITCH, ENTITY_PARROT_IMITATE_WITHER, ENTITY_PARROT_IMITATE_WITHER_SKELETON, ENTITY_PARROT_IMITATE_WOLF, ENTITY_PARROT_IMITATE_ZOGLIN, ENTITY_PARROT_IMITATE_ZOMBIE, ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER, ENTITY_PARROT_STEP, ENTITY_PHANTOM_AMBIENT, ENTITY_PHANTOM_BITE, ENTITY_PHANTOM_DEATH, ENTITY_PHANTOM_FLAP, ENTITY_PHANTOM_HURT, ENTITY_PHANTOM_SWOOP, ENTITY_PIGLIN_ADMIRING_ITEM, ENTITY_PIGLIN_AMBIENT, ENTITY_PIGLIN_ANGRY, ENTITY_PIGLIN_BRUTE_AMBIENT, ENTITY_PIGLIN_BRUTE_ANGRY, ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED, ENTITY_PIGLIN_BRUTE_DEATH, ENTITY_PIGLIN_BRUTE_HURT, ENTITY_PIGLIN_BRUTE_STEP, ENTITY_PIGLIN_CELEBRATE, ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED, ENTITY_PIGLIN_DEATH, ENTITY_PIGLIN_HURT, ENTITY_PIGLIN_JEALOUS, ENTITY_PIGLIN_RETREAT, ENTITY_PIGLIN_STEP, ENTITY_PIG_AMBIENT, ENTITY_PIG_DEATH, ENTITY_PIG_HURT, ENTITY_PIG_SADDLE, ENTITY_PIG_STEP, ENTITY_PILLAGER_AMBIENT, ENTITY_PILLAGER_CELEBRATE, ENTITY_PILLAGER_DEATH, ENTITY_PILLAGER_HURT, ENTITY_PLAYER_ATTACK_CRIT, ENTITY_PLAYER_ATTACK_KNOCKBACK, ENTITY_PLAYER_ATTACK_NODAMAGE, ENTITY_PLAYER_ATTACK_STRONG, ENTITY_PLAYER_ATTACK_SWEEP, ENTITY_PLAYER_ATTACK_WEAK, ENTITY_PLAYER_BIG_FALL, ENTITY_PLAYER_BREATH, ENTITY_PLAYER_BURP, ENTITY_PLAYER_DEATH, ENTITY_PLAYER_HURT, ENTITY_PLAYER_HURT_DROWN, ENTITY_PLAYER_HURT_FREEZE, ENTITY_PLAYER_HURT_ON_FIRE, ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH, ENTITY_PLAYER_LEVELUP, ENTITY_PLAYER_SMALL_FALL, ENTITY_PLAYER_SPLASH, ENTITY_PLAYER_SPLASH_HIGH_SPEED, ENTITY_PLAYER_SWIM, ENTITY_PLAYER_TELEPORT, ENTITY_POLAR_BEAR_AMBIENT, ENTITY_POLAR_BEAR_AMBIENT_BABY, ENTITY_POLAR_BEAR_DEATH, ENTITY_POLAR_BEAR_HURT, ENTITY_POLAR_BEAR_STEP, ENTITY_POLAR_BEAR_WARNING, ENTITY_PUFFER_FISH_AMBIENT, ENTITY_PUFFER_FISH_BLOW_OUT, ENTITY_PUFFER_FISH_BLOW_UP, ENTITY_PUFFER_FISH_DEATH, ENTITY_PUFFER_FISH_FLOP, ENTITY_PUFFER_FISH_HURT, ENTITY_PUFFER_FISH_STING, ENTITY_RABBIT_AMBIENT, ENTITY_RABBIT_ATTACK, ENTITY_RABBIT_DEATH, ENTITY_RABBIT_HURT, ENTITY_RABBIT_JUMP, ENTITY_RAVAGER_AMBIENT, ENTITY_RAVAGER_ATTACK, ENTITY_RAVAGER_CELEBRATE, ENTITY_RAVAGER_DEATH, ENTITY_RAVAGER_HURT, ENTITY_RAVAGER_ROAR, ENTITY_RAVAGER_STEP, ENTITY_RAVAGER_STUNNED, ENTITY_SALMON_AMBIENT, ENTITY_SALMON_DEATH, ENTITY_SALMON_FLOP, ENTITY_SALMON_HURT, ENTITY_SHEEP_AMBIENT, ENTITY_SHEEP_DEATH, ENTITY_SHEEP_HURT, ENTITY_SHEEP_SHEAR, ENTITY_SHEEP_STEP, ENTITY_SHULKER_AMBIENT, ENTITY_SHULKER_BULLET_HIT, ENTITY_SHULKER_BULLET_HURT, ENTITY_SHULKER_CLOSE, ENTITY_SHULKER_DEATH, ENTITY_SHULKER_HURT, ENTITY_SHULKER_HURT_CLOSED, ENTITY_SHULKER_OPEN, ENTITY_SHULKER_SHOOT, ENTITY_SHULKER_TELEPORT, ENTITY_SILVERFISH_AMBIENT, ENTITY_SILVERFISH_DEATH, ENTITY_SILVERFISH_HURT, ENTITY_SILVERFISH_STEP, ENTITY_SKELETON_AMBIENT, ENTITY_SKELETON_CONVERTED_TO_STRAY, ENTITY_SKELETON_DEATH, ENTITY_SKELETON_HORSE_AMBIENT, ENTITY_SKELETON_HORSE_AMBIENT_WATER, ENTITY_SKELETON_HORSE_DEATH, ENTITY_SKELETON_HORSE_GALLOP_WATER, ENTITY_SKELETON_HORSE_HURT, ENTITY_SKELETON_HORSE_JUMP_WATER, ENTITY_SKELETON_HORSE_STEP_WATER, ENTITY_SKELETON_HORSE_SWIM, ENTITY_SKELETON_HURT, ENTITY_SKELETON_SHOOT, ENTITY_SKELETON_STEP, ENTITY_SLIME_ATTACK, ENTITY_SLIME_DEATH, ENTITY_SLIME_DEATH_SMALL, ENTITY_SLIME_HURT, ENTITY_SLIME_HURT_SMALL, ENTITY_SLIME_JUMP, ENTITY_SLIME_JUMP_SMALL, ENTITY_SLIME_SQUISH, ENTITY_SLIME_SQUISH_SMALL, ENTITY_SNIFFER_DEATH, ENTITY_SNIFFER_DIGGING, ENTITY_SNIFFER_DIGGING_STOP, ENTITY_SNIFFER_DROP_SEED, ENTITY_SNIFFER_EAT, ENTITY_SNIFFER_HAPPY, ENTITY_SNIFFER_HURT, ENTITY_SNIFFER_IDLE, ENTITY_SNIFFER_SCENTING, ENTITY_SNIFFER_SEARCHING, ENTITY_SNIFFER_SNIFFING, ENTITY_SNIFFER_STEP, ENTITY_SNOWBALL_THROW, ENTITY_SNOW_GOLEM_AMBIENT, ENTITY_SNOW_GOLEM_DEATH, ENTITY_SNOW_GOLEM_HURT, ENTITY_SNOW_GOLEM_SHEAR, ENTITY_SNOW_GOLEM_SHOOT, ENTITY_SPIDER_AMBIENT, ENTITY_SPIDER_DEATH, ENTITY_SPIDER_HURT, ENTITY_SPIDER_STEP, ENTITY_SPLASH_POTION_BREAK, ENTITY_SPLASH_POTION_THROW, ENTITY_SQUID_AMBIENT, ENTITY_SQUID_DEATH, ENTITY_SQUID_HURT, ENTITY_SQUID_SQUIRT, ENTITY_STRAY_AMBIENT, ENTITY_STRAY_DEATH, ENTITY_STRAY_HURT, ENTITY_STRAY_STEP, ENTITY_STRIDER_AMBIENT, ENTITY_STRIDER_DEATH, ENTITY_STRIDER_EAT, ENTITY_STRIDER_HAPPY, ENTITY_STRIDER_HURT, ENTITY_STRIDER_RETREAT, ENTITY_STRIDER_SADDLE, ENTITY_STRIDER_STEP, ENTITY_STRIDER_STEP_LAVA, ENTITY_TADPOLE_DEATH, ENTITY_TADPOLE_FLOP, ENTITY_TADPOLE_GROW_UP, ENTITY_TADPOLE_HURT, ENTITY_TNT_PRIMED, ENTITY_TROPICAL_FISH_AMBIENT, ENTITY_TROPICAL_FISH_DEATH, ENTITY_TROPICAL_FISH_FLOP, ENTITY_TROPICAL_FISH_HURT, ENTITY_TURTLE_AMBIENT_LAND, ENTITY_TURTLE_DEATH, ENTITY_TURTLE_DEATH_BABY, ENTITY_TURTLE_EGG_BREAK, ENTITY_TURTLE_EGG_CRACK, ENTITY_TURTLE_EGG_HATCH, ENTITY_TURTLE_HURT, ENTITY_TURTLE_HURT_BABY, ENTITY_TURTLE_LAY_EGG, ENTITY_TURTLE_SHAMBLE, ENTITY_TURTLE_SHAMBLE_BABY, ENTITY_TURTLE_SWIM, ENTITY_VEX_AMBIENT, ENTITY_VEX_CHARGE, ENTITY_VEX_DEATH, ENTITY_VEX_HURT, ENTITY_VILLAGER_AMBIENT, ENTITY_VILLAGER_CELEBRATE, ENTITY_VILLAGER_DEATH, ENTITY_VILLAGER_HURT, ENTITY_VILLAGER_NO, ENTITY_VILLAGER_TRADE, ENTITY_VILLAGER_WORK_ARMORER, ENTITY_VILLAGER_WORK_BUTCHER, ENTITY_VILLAGER_WORK_CARTOGRAPHER, ENTITY_VILLAGER_WORK_CLERIC, ENTITY_VILLAGER_WORK_FARMER, ENTITY_VILLAGER_WORK_FISHERMAN, ENTITY_VILLAGER_WORK_FLETCHER, ENTITY_VILLAGER_WORK_LEATHERWORKER, ENTITY_VILLAGER_WORK_LIBRARIAN, ENTITY_VILLAGER_WORK_MASON, ENTITY_VILLAGER_WORK_SHEPHERD, ENTITY_VILLAGER_WORK_TOOLSMITH, ENTITY_VILLAGER_WORK_WEAPONSMITH, ENTITY_VILLAGER_YES, ENTITY_VINDICATOR_AMBIENT, ENTITY_VINDICATOR_CELEBRATE, ENTITY_VINDICATOR_DEATH, ENTITY_VINDICATOR_HURT, ENTITY_WANDERING_TRADER_AMBIENT, ENTITY_WANDERING_TRADER_DEATH, ENTITY_WANDERING_TRADER_DISAPPEARED, ENTITY_WANDERING_TRADER_DRINK_MILK, ENTITY_WANDERING_TRADER_DRINK_POTION, ENTITY_WANDERING_TRADER_HURT, ENTITY_WANDERING_TRADER_NO, ENTITY_WANDERING_TRADER_REAPPEARED, ENTITY_WANDERING_TRADER_TRADE, ENTITY_WANDERING_TRADER_YES, ENTITY_WARDEN_AGITATED, ENTITY_WARDEN_AMBIENT, ENTITY_WARDEN_ANGRY, ENTITY_WARDEN_ATTACK_IMPACT, ENTITY_WARDEN_DEATH, ENTITY_WARDEN_DIG, ENTITY_WARDEN_EMERGE, ENTITY_WARDEN_HEARTBEAT, ENTITY_WARDEN_HURT, ENTITY_WARDEN_LISTENING, ENTITY_WARDEN_LISTENING_ANGRY, ENTITY_WARDEN_NEARBY_CLOSE, ENTITY_WARDEN_NEARBY_CLOSER, ENTITY_WARDEN_NEARBY_CLOSEST, ENTITY_WARDEN_ROAR, ENTITY_WARDEN_SNIFF, ENTITY_WARDEN_SONIC_BOOM, ENTITY_WARDEN_SONIC_CHARGE, ENTITY_WARDEN_STEP, ENTITY_WARDEN_TENDRIL_CLICKS, ENTITY_WITCH_AMBIENT, ENTITY_WITCH_CELEBRATE, ENTITY_WITCH_DEATH, ENTITY_WITCH_DRINK, ENTITY_WITCH_HURT, ENTITY_WITCH_THROW, ENTITY_WITHER_AMBIENT, ENTITY_WITHER_BREAK_BLOCK, ENTITY_WITHER_DEATH, ENTITY_WITHER_HURT, ENTITY_WITHER_SHOOT, ENTITY_WITHER_SKELETON_AMBIENT, ENTITY_WITHER_SKELETON_DEATH, ENTITY_WITHER_SKELETON_HURT, ENTITY_WITHER_SKELETON_STEP, ENTITY_WITHER_SPAWN, ENTITY_WOLF_AMBIENT, ENTITY_WOLF_DEATH, ENTITY_WOLF_GROWL, ENTITY_WOLF_HOWL, ENTITY_WOLF_HURT, ENTITY_WOLF_PANT, ENTITY_WOLF_SHAKE, ENTITY_WOLF_STEP, ENTITY_WOLF_WHINE, ENTITY_ZOGLIN_AMBIENT, ENTITY_ZOGLIN_ANGRY, ENTITY_ZOGLIN_ATTACK, ENTITY_ZOGLIN_DEATH, ENTITY_ZOGLIN_HURT, ENTITY_ZOGLIN_STEP, ENTITY_ZOMBIE_AMBIENT, ENTITY_ZOMBIE_ATTACK_IRON_DOOR, ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR, ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, ENTITY_ZOMBIE_CONVERTED_TO_DROWNED, ENTITY_ZOMBIE_DEATH, ENTITY_ZOMBIE_DESTROY_EGG, ENTITY_ZOMBIE_HORSE_AMBIENT, ENTITY_ZOMBIE_HORSE_DEATH, ENTITY_ZOMBIE_HORSE_HURT, ENTITY_ZOMBIE_HURT, ENTITY_ZOMBIE_INFECT, ENTITY_ZOMBIE_STEP, ENTITY_ZOMBIE_VILLAGER_AMBIENT, ENTITY_ZOMBIE_VILLAGER_CONVERTED, ENTITY_ZOMBIE_VILLAGER_CURE, ENTITY_ZOMBIE_VILLAGER_DEATH, ENTITY_ZOMBIE_VILLAGER_HURT, ENTITY_ZOMBIE_VILLAGER_STEP, ENTITY_ZOMBIFIED_PIGLIN_AMBIENT, ENTITY_ZOMBIFIED_PIGLIN_ANGRY, ENTITY_ZOMBIFIED_PIGLIN_DEATH, ENTITY_ZOMBIFIED_PIGLIN_HURT, EVENT_RAID_HORN, INTENTIONALLY_EMPTY, ITEM_ARMOR_EQUIP_CHAIN, ITEM_ARMOR_EQUIP_DIAMOND, ITEM_ARMOR_EQUIP_ELYTRA, ITEM_ARMOR_EQUIP_GENERIC, ITEM_ARMOR_EQUIP_GOLD, ITEM_ARMOR_EQUIP_IRON, ITEM_ARMOR_EQUIP_LEATHER, ITEM_ARMOR_EQUIP_NETHERITE, ITEM_ARMOR_EQUIP_TURTLE, ITEM_AXE_SCRAPE, ITEM_AXE_STRIP, ITEM_AXE_WAX_OFF, ITEM_BONE_MEAL_USE, ITEM_BOOK_PAGE_TURN, ITEM_BOOK_PUT, ITEM_BOTTLE_EMPTY, ITEM_BOTTLE_FILL, ITEM_BOTTLE_FILL_DRAGONBREATH, ITEM_BRUSH_BRUSHING, ITEM_BRUSH_BRUSHING_GENERIC, ITEM_BRUSH_BRUSHING_GRAVEL, ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE, ITEM_BRUSH_BRUSHING_SAND, ITEM_BRUSH_BRUSHING_SAND_COMPLETE, ITEM_BRUSH_BRUSH_SAND_COMPLETED, ITEM_BUCKET_EMPTY, ITEM_BUCKET_EMPTY_AXOLOTL, ITEM_BUCKET_EMPTY_FISH, ITEM_BUCKET_EMPTY_LAVA, ITEM_BUCKET_EMPTY_POWDER_SNOW, ITEM_BUCKET_EMPTY_TADPOLE, ITEM_BUCKET_FILL, ITEM_BUCKET_FILL_AXOLOTL, ITEM_BUCKET_FILL_FISH, ITEM_BUCKET_FILL_LAVA, ITEM_BUCKET_FILL_POWDER_SNOW, ITEM_BUCKET_FILL_TADPOLE, ITEM_BUNDLE_DROP_CONTENTS, ITEM_BUNDLE_INSERT, ITEM_BUNDLE_REMOVE_ONE, ITEM_CHORUS_FRUIT_TELEPORT, ITEM_CROP_PLANT, ITEM_CROSSBOW_HIT, ITEM_CROSSBOW_LOADING_END, ITEM_CROSSBOW_LOADING_MIDDLE, ITEM_CROSSBOW_LOADING_START, ITEM_CROSSBOW_QUICK_CHARGE_1, ITEM_CROSSBOW_QUICK_CHARGE_2, ITEM_CROSSBOW_QUICK_CHARGE_3, ITEM_CROSSBOW_SHOOT, ITEM_DYE_USE, ITEM_ELYTRA_FLYING, ITEM_FIRECHARGE_USE, ITEM_FLINTANDSTEEL_USE, ITEM_GLOW_INK_SAC_USE, ITEM_GOAT_HORN_PLAY, ITEM_GOAT_HORN_SOUND_0, ITEM_GOAT_HORN_SOUND_1, ITEM_GOAT_HORN_SOUND_2, ITEM_GOAT_HORN_SOUND_3, ITEM_GOAT_HORN_SOUND_4, ITEM_GOAT_HORN_SOUND_5, ITEM_GOAT_HORN_SOUND_6, ITEM_GOAT_HORN_SOUND_7, ITEM_HOE_TILL, ITEM_HONEYCOMB_WAX_ON, ITEM_HONEY_BOTTLE_DRINK, ITEM_INK_SAC_USE, ITEM_LODESTONE_COMPASS_LOCK, ITEM_NETHER_WART_PLANT, ITEM_SHIELD_BLOCK, ITEM_SHIELD_BREAK, ITEM_SHOVEL_FLATTEN, ITEM_SPYGLASS_STOP_USING, ITEM_SPYGLASS_USE, ITEM_TOTEM_USE, ITEM_TRIDENT_HIT, ITEM_TRIDENT_HIT_GROUND, ITEM_TRIDENT_RETURN, ITEM_TRIDENT_RIPTIDE_1, ITEM_TRIDENT_RIPTIDE_2, ITEM_TRIDENT_RIPTIDE_3, ITEM_TRIDENT_THROW, ITEM_TRIDENT_THUNDER, MUSIC_CREATIVE, MUSIC_CREDITS, MUSIC_DISC_11, MUSIC_DISC_13, MUSIC_DISC_5, MUSIC_DISC_BLOCKS, MUSIC_DISC_CAT, MUSIC_DISC_CHIRP, MUSIC_DISC_FAR, MUSIC_DISC_MALL, MUSIC_DISC_MELLOHI, MUSIC_DISC_OTHERSIDE, MUSIC_DISC_PIGSTEP, MUSIC_DISC_RELIC, MUSIC_DISC_STAL, MUSIC_DISC_STRAD, MUSIC_DISC_WAIT, MUSIC_DISC_WARD, MUSIC_DRAGON, MUSIC_END, MUSIC_GAME, MUSIC_MENU, MUSIC_NETHER_BASALT_DELTAS, MUSIC_NETHER_CRIMSON_FOREST, MUSIC_NETHER_NETHER_WASTES, MUSIC_NETHER_SOUL_SAND_VALLEY, MUSIC_NETHER_WARPED_FOREST, MUSIC_OVERWORLD_BADLANDS, MUSIC_OVERWORLD_BAMBOO_JUNGLE, MUSIC_OVERWORLD_CHERRY_GROVE, MUSIC_OVERWORLD_DEEP_DARK, MUSIC_OVERWORLD_DESERT, MUSIC_OVERWORLD_DRIPSTONE_CAVES, MUSIC_OVERWORLD_FLOWER_FOREST, MUSIC_OVERWORLD_FOREST, MUSIC_OVERWORLD_FROZEN_PEAKS, MUSIC_OVERWORLD_GROVE, MUSIC_OVERWORLD_JAGGED_PEAKS, MUSIC_OVERWORLD_JUNGLE, MUSIC_OVERWORLD_JUNGLE_AND_FOREST, MUSIC_OVERWORLD_LUSH_CAVES, MUSIC_OVERWORLD_MEADOW, MUSIC_OVERWORLD_OLD_GROWTH_TAIGA, MUSIC_OVERWORLD_SNOWY_SLOPES, MUSIC_OVERWORLD_SPARSE_JUNGLE, MUSIC_OVERWORLD_STONY_PEAKS, MUSIC_OVERWORLD_SWAMP, MUSIC_UNDER_WATER, PARTICLE_SOUL_ESCAPE, UI_BUTTON_CLICK, UI_CARTOGRAPHY_TABLE_TAKE_RESULT, UI_LOOM_SELECT_PATTERN, UI_LOOM_TAKE_RESULT, UI_STONECUTTER_SELECT_RECIPE, UI_STONECUTTER_TAKE_RESULT, UI_TOAST_CHALLENGE_COMPLETE, UI_TOAST_IN, UI_TOAST_OUT, WEATHER_RAIN, WEATHER_RAIN_ABOVE};
	}

	private static final class Data {
		private static final WeakHashMap<String, Sound> BUKKIT_NAMES = new WeakHashMap();
		private static final Map<String, XSound> NAMES = new HashMap();

		static {
			Sound[] var0 = Sound.values();
			int var1 = var0.length;

			for(int var2 = 0; var2 < var1; ++var2) {
				Sound sound = var0[var2];
				BUKKIT_NAMES.put(sound.name(), sound);
			}

		}
	}

	public static class Record implements Cloneable {
		private static final Random RANDOM = new Random();
		private Object sound;
		@Nonnull
		private XSound.Category category;
		@Nullable
		private Long seed;
		private float volume;
		private float pitch;
		private boolean publicSound;

		public Record() {
			this.category = XSound.Category.MASTER;
			this.volume = 1.0F;
			this.pitch = 1.0F;
		}

		@Nullable
		public Long getSeed() {
			return this.seed;
		}

		public Object getSound() {
			return this.sound;
		}

		@Nonnull
		public XSound.Category getCategory() {
			return this.category;
		}

		public float getVolume() {
			return this.volume;
		}

		public float getPitch() {
			return this.pitch;
		}

		public XSound.Record inCategory(XSound.Category category) {
			this.category = (XSound.Category)Objects.requireNonNull(category, "Sound category cannot be null");
			return this;
		}

		public XSound.SoundPlayer soundPlayer() {
			return new XSound.SoundPlayer(this);
		}

		public XSound.Record withSound(@Nonnull XSound sound) {
			Objects.requireNonNull(sound, "Cannot play a null sound");
			this.sound = sound;
			return this;
		}

		public XSound.Record withSound(@Nonnull String sound) {
			Objects.requireNonNull(sound, "Cannot play a null sound");
			sound = sound.toLowerCase(Locale.ENGLISH);
			if (sound.indexOf(58) < 0) {
				throw new IllegalArgumentException("Raw sound name doesn't contain both namespace and key: " + sound);
			} else {
				this.sound = sound;
				return this;
			}
		}

		public long generateSeed() {
			return this.seed == null ? RANDOM.nextLong() : this.seed;
		}

		public XSound.Record withVolume(float volume) {
			this.volume = volume;
			return this;
		}

		public XSound.Record publicSound(boolean publicSound) {
			this.publicSound = publicSound;
			return this;
		}

		public XSound.Record withPitch(float pitch) {
			this.pitch = pitch;
			return this;
		}

		public XSound.Record withSeed(Long seed) {
			this.seed = seed;
			return this;
		}

		public String rebuild() {
			String str = "";
			if (this.publicSound) {
				str = str + "~";
			}

			if (this.category != XSound.Category.MASTER) {
				str = str + this.category.name();
			}

			str = str + String.valueOf(this.sound) + ", " + this.volume + ", " + this.pitch;
			if (this.seed != null) {
				str = str + ", " + this.seed;
			}

			return str;
		}

		public String toString() {
			String var10000 = String.valueOf(this.sound);
			return "Record{sound=" + var10000 + ", category=" + String.valueOf(this.category) + ", seed=" + this.seed + ", volume=" + this.volume + ", pitch=" + this.pitch + ", publicSound=" + this.publicSound + "}";
		}

		public XSound.Record clone() {
			XSound.Record record = new XSound.Record();
			record.sound = this.sound;
			record.volume = this.volume;
			record.pitch = this.pitch;
			record.publicSound = this.publicSound;
			record.seed = this.seed;
			return record;
		}
	}

	public static class SoundPlayer {
		private static final byte SUPPORTED_METHOD_LEVEL;
		public XSound.Record record;
		public Set<UUID> players = new HashSet(10);
		public Set<UUID> heard = new HashSet();
		@Nullable
		public Location location;

		public SoundPlayer(XSound.Record record) {
			this.withRecord(record);
		}

		public XSound.SoundPlayer withRecord(XSound.Record record) {
			this.record = (XSound.Record)Objects.requireNonNull(record, "Cannot play a null record");
			return this;
		}

		public XSound.SoundPlayer forPlayers(@Nullable Player... players) {
			this.players.clear();
			if (players != null && players.length > 0) {
				this.players.addAll((Collection)Arrays.stream(players).map(Entity::getUniqueId).collect(Collectors.toSet()));
			}

			return this;
		}

		public XSound.SoundPlayer atLocation(@Nullable Location location) {
			this.location = location;
			return this;
		}

		public XSound.SoundPlayer forPlayers(@Nullable Collection<Player> players) {
			this.players.clear();
			this.players.addAll((Collection)players.stream().map(Entity::getUniqueId).collect(Collectors.toList()));
			return this;
		}

		public Collection<Player> getHearingPlayers() {
			if (!this.record.publicSound && !this.players.isEmpty()) {
				return (Collection)toOnlinePlayers(this.players, Collectors.toList());
			} else {
				Location loc;
				if (this.location == null) {
					if (this.players.size() != 1) {
						throw new IllegalStateException("Cannot play public sound when no location is specified: " + String.valueOf(this));
					}

					Player player = Bukkit.getPlayer((UUID)this.players.iterator().next());
					if (player == null) {
						return new ArrayList();
					}

					loc = player.getEyeLocation();
				} else {
					loc = this.location;
				}

				return getHearingPlayers(loc, (double)this.record.volume);
			}
		}

		@Nonnull
		public static Collection<Player> getHearingPlayers(Location location, double volume) {
			volume = volume > 1.0D ? 16.0D * volume : 16.0D;
			double powerVolume = volume * volume;
			List<Player> playersInWorld = location.getWorld().getPlayers();
			List<Player> hearing = new ArrayList(playersInWorld.size());
			double x = location.getX();
			double y = location.getY();
			double z = location.getZ();
			Iterator var13 = playersInWorld.iterator();

			while(var13.hasNext()) {
				Player player = (Player)var13.next();
				Location loc = player.getLocation();
				double deltaX = x - loc.getX();
				double deltaY = y - loc.getY();
				double deltaZ = z - loc.getZ();
				double length = deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;
				if (length < powerVolume) {
					hearing.add(player);
				}
			}

			return hearing;
		}

		public void play() {
			Location loc;
			if (this.location == null) {
				if (this.players.size() != 1) {
					throw new IllegalStateException("Cannot play sound when there is no location available");
				}

				UUID first = (UUID)this.players.iterator().next();
				Player player = Bukkit.getPlayer(first);
				if (player == null) {
					return;
				}

				loc = player.getEyeLocation();
			} else {
				loc = this.location;
			}

			this.play(loc);
		}

		public void play(@Nonnull Location updatedLocation) {
			Collection<Player> hearing = this.getHearingPlayers();
			this.heard = (Set)hearing.stream().map(Entity::getUniqueId).collect(Collectors.toSet());
			if (!hearing.isEmpty()) {
				this.play(hearing, updatedLocation);
			}
		}

		private static <A, R> R toOnlinePlayers(Collection<UUID> players, Collector<Player, A, R> collector) {
			return players.stream().map(Bukkit::getPlayer).filter(Objects::nonNull).collect(collector);
		}

		public void play(Collection<Player> players, @Nonnull Location updatedLocation) {
			Objects.requireNonNull(updatedLocation, "Cannot play sound at null location");
			Sound objSound = this.record.sound instanceof XSound ? ((XSound)this.record.sound).parseSound() : null;
			String strSound = this.record.sound instanceof String ? (String)this.record.sound : null;
			Iterator var5 = players.iterator();

			while(var5.hasNext()) {
				Player player = (Player)var5.next();
				switch(SUPPORTED_METHOD_LEVEL) {
					case 1:
						if (objSound != null) {
							player.playSound(updatedLocation, objSound, this.record.volume, this.record.pitch);
						} else {
							player.playSound(updatedLocation, strSound, this.record.volume, this.record.pitch);
						}
						break;
					case 2:
						if (objSound != null) {
							player.playSound(updatedLocation, objSound, (SoundCategory)this.record.category.getBukkitObject(), this.record.volume, this.record.pitch);
						} else {
							player.playSound(updatedLocation, strSound, (SoundCategory)this.record.category.getBukkitObject(), this.record.volume, this.record.pitch);
						}
						break;
					case 3:
						if (objSound != null) {
							player.playSound(updatedLocation, objSound, (SoundCategory)this.record.category.getBukkitObject(), this.record.volume, this.record.pitch, this.record.generateSeed());
						} else {
							player.playSound(updatedLocation, strSound, (SoundCategory)this.record.category.getBukkitObject(), this.record.volume, this.record.pitch, this.record.generateSeed());
						}
						break;
					default:
						throw new IllegalStateException("Unknown format: " + SUPPORTED_METHOD_LEVEL);
				}
			}

		}

		public void stopSound() {
			if (this.heard != null && !this.heard.isEmpty()) {
				List<Player> heardOnline = (List)toOnlinePlayers(this.heard, Collectors.toList());
				heardOnline.forEach((x) -> {
					if (this.record.sound instanceof XSound) {
						x.stopSound(((XSound)this.record.sound).parseSound());
					} else {
						x.stopSound((String)this.record.sound);
					}

				});
			}
		}

		static {
			byte level;
			try {
				Player.class.getDeclaredMethod("playSound", Location.class, String.class, SoundCategory.class, Float.TYPE, Float.TYPE, Long.TYPE);
				level = 3;
			} catch (Throwable var6) {
				try {
					Player.class.getDeclaredMethod("playSound", Location.class, String.class, SoundCategory.class, Float.TYPE, Float.TYPE);
					level = 2;
				} catch (Throwable var5) {
					try {
						Player.class.getDeclaredMethod("playSound", Location.class, Sound.class, Float.TYPE, Float.TYPE);
						level = 1;
					} catch (Throwable var4) {
						throw new RuntimeException("None of sound methods are supported", var4);
					}
				}
			}

			SUPPORTED_METHOD_LEVEL = level;
		}
	}

	public static enum Category {
		MASTER,
		MUSIC,
		RECORDS,
		WEATHER,
		BLOCKS,
		HOSTILE,
		NEUTRAL,
		PLAYERS,
		AMBIENT,
		VOICE;

		private final Object bukkitObject;

		public boolean isSupported() {
			return this.bukkitObject != null;
		}

		private static <T> T cast(Object any) {
			return (T) any;
		}

		private Category() {
			Object sc = null;

			try {
				sc = Enums.getIfPresent((Class)cast(Class.forName("org.bukkit.SoundCategory")), this.name()).orNull();
			} catch (ClassNotFoundException var5) {
			}

			this.bukkitObject = sc;
		}

		public Object getBukkitObject() {
			return this.bukkitObject;
		}

		// $FF: synthetic method
		private static XSound.Category[] $values() {
			return new XSound.Category[]{MASTER, MUSIC, RECORDS, WEATHER, BLOCKS, HOSTILE, NEUTRAL, PLAYERS, AMBIENT, VOICE};
		}
	}
}